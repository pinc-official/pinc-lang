// Generated by Melange

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Format from "bs-platform/lib/es6/format.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Stdlib from "bs-platform/lib/es6/stdlib.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Pinc_Token from "./Pinc_Token.js";

function make(start_pos, end_pos, typ) {
  return {
          start_pos: start_pos,
          end_pos: end_pos,
          typ: typ
        };
}

var non_terminated_string = "This string is not terminated. Please add a double-quote (\") at the end.";

var non_terminated_template = "Your Template was not closed correctly. You probably mismatched or forgot a closing tag.";

var unknown_character = Printf.sprintf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "The character ",
        _1: {
          TAG: /* Caml_char */1,
          _0: {
            TAG: /* String_literal */11,
            _0: " is unknown. You should remove it.",
            _1: /* End_of_format */0
          }
        }
      },
      _1: "The character %C is unknown. You should remove it."
    });

function unexpected_token(t) {
  return Curry._1(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "The token ",
                    _1: {
                      TAG: /* Caml_string */3,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: " is unexpected at this point.",
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "The token %S is unexpected at this point."
                }), Pinc_Token.to_string(t));
}

function expected_ident(t) {
  if (Pinc_Token.is_keyword(t)) {
    return Curry._1(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* Char_literal */12,
                      _0: /* '`' */96,
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "` is a keyword. Please choose another name.",
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "`%s` is a keyword. Please choose another name."
                  }), Pinc_Token.to_string(t));
  } else {
    return "Expected to see an identifier at this point.";
  }
}

function expected_uppercase_ident(i) {
  if (typeof i === "number") {
    return "Expected to see an uppercase identifier at this point.";
  }
  if (i.TAG !== /* IDENT_LOWER */0) {
    return "Expected to see an uppercase identifier at this point.";
  }
  var i$1 = i._0;
  return Curry._2(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Expected to see an uppercase identifier at this point. Did you mean ",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: " instead of ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* Char_literal */12,
                            _0: /* '?' */63,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "Expected to see an uppercase identifier at this point. Did you mean %s instead of %s?"
                }), $$String.capitalize_ascii(i$1), i$1);
}

function expected_lowercase_ident(i) {
  if (typeof i !== "number" && i.TAG === /* IDENT_UPPER */1) {
    var i$1 = i._0;
    return Curry._2(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "Expected to see a lowercase identifier at this point. Did you mean ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " instead of ",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* Char_literal */12,
                              _0: /* '?' */63,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    },
                    _1: "Expected to see a lowercase identifier at this point. Did you mean %s instead of %s?"
                  }), $$String.lowercase_ascii(i$1), i$1);
  }
  if (Pinc_Token.is_keyword(i)) {
    return Curry._1(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* Char_literal */12,
                      _0: /* '`' */96,
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "` is a keyword. Please choose another name.",
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "`%s` is a keyword. Please choose another name."
                  }), Pinc_Token.to_string(i));
  } else {
    return Curry._1(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "Expected to see a lowercase identifier at this point. Instead saw ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "Expected to see a lowercase identifier at this point. Instead saw %s"
                  }), Pinc_Token.to_string(i));
  }
}

function expected_token(t) {
  return Curry._1(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Expected token ",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: " at this point.",
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "Expected token %s at this point."
                }), Pinc_Token.to_string(t));
}

function make$1(t) {
  var c = t.typ;
  if (typeof c === "number") {
    if (c === /* NonTerminatedString */0) {
      return non_terminated_string;
    } else {
      return non_terminated_template;
    }
  }
  switch (c.TAG | 0) {
    case /* UnknownCharacter */0 :
        return Curry._1(unknown_character, c._0);
    case /* UnexpectedToken */1 :
        return unexpected_token(c._0);
    case /* ExpectedIdent */2 :
        return expected_ident(c._0);
    case /* ExpectedUpperIdent */3 :
        return expected_uppercase_ident(c._0);
    case /* ExpectedLowerIdent */4 :
        return expected_lowercase_ident(c._0);
    case /* ExpectedToken */5 :
        return expected_token(c._0);
    case /* Message */6 :
        return c._0;
    
  }
}

var Messages = {
  non_terminated_string: non_terminated_string,
  non_terminated_template: non_terminated_template,
  unknown_character: unknown_character,
  unexpected_token: unexpected_token,
  expected_ident: expected_ident,
  expected_uppercase_ident: expected_uppercase_ident,
  expected_lowercase_ident: expected_lowercase_ident,
  expected_token: expected_token,
  make: make$1
};

function print(fmt, position, message) {
  var print_pos = function (fmt, positions) {
    var dim_loc = function (fmt, param) {
      var end_pos = param[1];
      var start_pos = param[0];
      if (start_pos.line === end_pos.line) {
        if (start_pos.column === end_pos.column) {
          return Curry._2(Format.fprintf(fmt)(/* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "at ",
                            _1: {
                              TAG: /* Formatting_gen */18,
                              _0: {
                                TAG: /* Open_tag */0,
                                _0: /* Format */{
                                  _0: {
                                    TAG: /* String_literal */11,
                                    _0: "<dim>",
                                    _1: /* End_of_format */0
                                  },
                                  _1: "<dim>"
                                }
                              },
                              _1: {
                                TAG: /* String_literal */11,
                                _0: "line ",
                                _1: {
                                  TAG: /* Int */4,
                                  _0: /* Int_i */3,
                                  _1: /* No_padding */0,
                                  _2: /* No_precision */0,
                                  _3: {
                                    TAG: /* String_literal */11,
                                    _0: ", column ",
                                    _1: {
                                      TAG: /* Int */4,
                                      _0: /* Int_i */3,
                                      _1: /* No_padding */0,
                                      _2: /* No_precision */0,
                                      _3: {
                                        TAG: /* Formatting_lit */17,
                                        _0: /* Close_tag */1,
                                        _1: /* End_of_format */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          _1: "at @{<dim>line %i, column %i@}"
                        }), start_pos.line, start_pos.column);
        } else {
          return Curry._3(Format.fprintf(fmt)(/* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "at ",
                            _1: {
                              TAG: /* Formatting_gen */18,
                              _0: {
                                TAG: /* Open_tag */0,
                                _0: /* Format */{
                                  _0: {
                                    TAG: /* String_literal */11,
                                    _0: "<dim>",
                                    _1: /* End_of_format */0
                                  },
                                  _1: "<dim>"
                                }
                              },
                              _1: {
                                TAG: /* String_literal */11,
                                _0: "line ",
                                _1: {
                                  TAG: /* Int */4,
                                  _0: /* Int_i */3,
                                  _1: /* No_padding */0,
                                  _2: /* No_precision */0,
                                  _3: {
                                    TAG: /* Formatting_lit */17,
                                    _0: /* Close_tag */1,
                                    _1: {
                                      TAG: /* String_literal */11,
                                      _0: " from ",
                                      _1: {
                                        TAG: /* Formatting_gen */18,
                                        _0: {
                                          TAG: /* Open_tag */0,
                                          _0: /* Format */{
                                            _0: {
                                              TAG: /* String_literal */11,
                                              _0: "<dim>",
                                              _1: /* End_of_format */0
                                            },
                                            _1: "<dim>"
                                          }
                                        },
                                        _1: {
                                          TAG: /* String_literal */11,
                                          _0: "column ",
                                          _1: {
                                            TAG: /* Int */4,
                                            _0: /* Int_i */3,
                                            _1: /* No_padding */0,
                                            _2: /* No_precision */0,
                                            _3: {
                                              TAG: /* String_literal */11,
                                              _0: " to ",
                                              _1: {
                                                TAG: /* Int */4,
                                                _0: /* Int_i */3,
                                                _1: /* No_padding */0,
                                                _2: /* No_precision */0,
                                                _3: {
                                                  TAG: /* Formatting_lit */17,
                                                  _0: /* Close_tag */1,
                                                  _1: /* End_of_format */0
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          _1: "at @{<dim>line %i@} from @{<dim>column %i to %i@}"
                        }), start_pos.line, start_pos.column, end_pos.column);
        }
      } else {
        return Curry._4(Format.fprintf(fmt)(/* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "from ",
                          _1: {
                            TAG: /* Formatting_gen */18,
                            _0: {
                              TAG: /* Open_tag */0,
                              _0: /* Format */{
                                _0: {
                                  TAG: /* String_literal */11,
                                  _0: "<dim>",
                                  _1: /* End_of_format */0
                                },
                                _1: "<dim>"
                              }
                            },
                            _1: {
                              TAG: /* String_literal */11,
                              _0: "line ",
                              _1: {
                                TAG: /* Int */4,
                                _0: /* Int_i */3,
                                _1: /* No_padding */0,
                                _2: /* No_precision */0,
                                _3: {
                                  TAG: /* String_literal */11,
                                  _0: ", column ",
                                  _1: {
                                    TAG: /* Int */4,
                                    _0: /* Int_i */3,
                                    _1: /* No_padding */0,
                                    _2: /* No_precision */0,
                                    _3: {
                                      TAG: /* Formatting_lit */17,
                                      _0: /* Close_tag */1,
                                      _1: {
                                        TAG: /* String_literal */11,
                                        _0: " to ",
                                        _1: {
                                          TAG: /* Formatting_gen */18,
                                          _0: {
                                            TAG: /* Open_tag */0,
                                            _0: /* Format */{
                                              _0: {
                                                TAG: /* String_literal */11,
                                                _0: "<dim>",
                                                _1: /* End_of_format */0
                                              },
                                              _1: "<dim>"
                                            }
                                          },
                                          _1: {
                                            TAG: /* String_literal */11,
                                            _0: "line ",
                                            _1: {
                                              TAG: /* Int */4,
                                              _0: /* Int_i */3,
                                              _1: /* No_padding */0,
                                              _2: /* No_precision */0,
                                              _3: {
                                                TAG: /* String_literal */11,
                                                _0: ", column ",
                                                _1: {
                                                  TAG: /* Int */4,
                                                  _0: /* Int_i */3,
                                                  _1: /* No_padding */0,
                                                  _2: /* No_precision */0,
                                                  _3: {
                                                    TAG: /* Formatting_lit */17,
                                                    _0: /* Close_tag */1,
                                                    _1: /* End_of_format */0
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        _1: "from @{<dim>line %i, column %i@} to @{<dim>line %i, column %i@}"
                      }), start_pos.line, start_pos.column, end_pos.line, end_pos.column);
      }
    };
    return Curry._3(Format.fprintf(fmt)(/* Format */{
                    _0: {
                      TAG: /* Formatting_gen */18,
                      _0: {
                        TAG: /* Open_tag */0,
                        _0: /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "<filename>",
                            _1: /* End_of_format */0
                          },
                          _1: "<filename>"
                        }
                      },
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* Formatting_lit */17,
                          _0: /* Close_tag */1,
                          _1: {
                            TAG: /* Char_literal */12,
                            _0: /* ' ' */32,
                            _1: {
                              TAG: /* Alpha */15,
                              _0: /* End_of_format */0
                            }
                          }
                        }
                      }
                    },
                    _1: "@{<filename>%s@} %a"
                  }), positions[0].filename, dim_loc, positions);
  };
  Curry._2(Format.fprintf(fmt)(/* Format */{
            _0: {
              TAG: /* String_literal */11,
              _0: "  ",
              _1: {
                TAG: /* Formatting_gen */18,
                _0: {
                  TAG: /* Open_box */1,
                  _0: /* Format */{
                    _0: /* End_of_format */0,
                    _1: ""
                  }
                },
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Close_box */0,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: {
                        TAG: /* Break */0,
                        _0: "@,",
                        _1: 0,
                        _2: 0
                      },
                      _1: /* End_of_format */0
                    }
                  }
                }
              }
            },
            _1: "  @[%a@]@,"
          }), print_pos, position);
  return Curry._1(Format.fprintf(fmt)(/* Format */{
                  _0: {
                    TAG: /* Formatting_gen */18,
                    _0: {
                      TAG: /* Open_box */1,
                      _0: /* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "<v>",
                          _1: /* End_of_format */0
                        },
                        _1: "<v>"
                      }
                    },
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: {
                        TAG: /* Break */0,
                        _0: "@,",
                        _1: 0,
                        _2: 0
                      },
                      _1: {
                        TAG: /* String_literal */11,
                        _0: "  ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* Formatting_lit */17,
                            _0: {
                              TAG: /* Break */0,
                              _0: "@,",
                              _1: 0,
                              _2: 0
                            },
                            _1: {
                              TAG: /* Formatting_lit */17,
                              _0: /* Close_box */0,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: "@[<v>@,  %s@,@]"
                }), message);
}

function print$1(t) {
  Format.fprintf(Format.err_formatter)(/* Format */{
        _0: {
          TAG: /* Formatting_gen */18,
          _0: {
            TAG: /* Open_box */1,
            _0: /* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "<v>",
                _1: /* End_of_format */0
              },
              _1: "<v>"
            }
          },
          _1: /* End_of_format */0
        },
        _1: "@[<v>"
      });
  var position_0 = t.start_pos;
  var position_1 = t.end_pos;
  var position = [
    position_0,
    position_1
  ];
  var message = make$1(t);
  print(Format.err_formatter, position, message);
  return Format.fprintf(Format.err_formatter)(/* Format */{
              _0: {
                TAG: /* Formatting_lit */17,
                _0: /* Close_box */0,
                _1: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Flush_newline */4,
                  _1: /* End_of_format */0
                }
              },
              _1: "@]@."
            });
}

var Reporter = {
  print: print$1
};

function report(start_pos, end_pos, typ) {
  print$1({
        start_pos: start_pos,
        end_pos: end_pos,
        typ: typ
      });
  return Stdlib.exit(1);
}

export {
  make ,
  Messages ,
  Reporter ,
  report ,
}
/* unknown_character Not a pure module */
