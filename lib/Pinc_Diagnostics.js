// Generated by Melange

import * as Stdlib from "bs-platform/lib/es6/stdlib.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Pinc_Token from "./Pinc_Token.js";

function make(start_pos, end_pos, typ) {
  return {
          start_pos: start_pos,
          end_pos: end_pos,
          typ: typ
        };
}

var non_terminated_string = "This string is not terminated. Please add a double-quote (\") at the end.";

var non_terminated_template = "Your Template was not closed correctly. You probably mismatched or forgot a closing tag.";

function unknown_character(c) {
  return "The character " + ($$String.make(1, c) + " is unknown. You should remove it.");
}

function unexpected_token(t) {
  return "The token " + (Pinc_Token.to_string(t) + " is unexpected at this point.");
}

function expected_ident(t) {
  if (Pinc_Token.is_keyword(t)) {
    return "\"" + (Pinc_Token.to_string(t) + "\" is a keyword. Please choose another name.");
  } else {
    return "Expected to see an identifier at this point.";
  }
}

function expected_uppercase_ident(i) {
  if (typeof i === "number") {
    return "Expected to see an uppercase identifier at this point.";
  }
  if (i.TAG !== /* IDENT_LOWER */0) {
    return "Expected to see an uppercase identifier at this point.";
  }
  var i$1 = i._0;
  return "Expected to see an uppercase identifier at this point. Did you mean " + ($$String.capitalize_ascii(i$1) + (" instead of " + (i$1 + "?")));
}

function expected_lowercase_ident(i) {
  if (typeof i !== "number" && i.TAG === /* IDENT_UPPER */1) {
    var i$1 = i._0;
    return "Expected to see a lowercase identifier at this point. Did you mean " + ($$String.lowercase_ascii(i$1) + (" instead of " + (i$1 + "?")));
  }
  if (Pinc_Token.is_keyword(i)) {
    return "`" + (Pinc_Token.to_string(i) + "` is a keyword. Please choose another name.");
  } else {
    return "Expected to see a lowercase identifier at this point. Instead saw " + Pinc_Token.to_string(i);
  }
}

function expected_token(t) {
  return "Expected token " + (Pinc_Token.to_string(t) + " at this point.");
}

function make$1(t) {
  var c = t.typ;
  if (typeof c === "number") {
    if (c === /* NonTerminatedString */0) {
      return non_terminated_string;
    } else {
      return non_terminated_template;
    }
  }
  switch (c.TAG | 0) {
    case /* UnknownCharacter */0 :
        return unknown_character(c._0);
    case /* UnexpectedToken */1 :
        return unexpected_token(c._0);
    case /* ExpectedIdent */2 :
        return expected_ident(c._0);
    case /* ExpectedUpperIdent */3 :
        return expected_uppercase_ident(c._0);
    case /* ExpectedLowerIdent */4 :
        return expected_lowercase_ident(c._0);
    case /* ExpectedToken */5 :
        return expected_token(c._0);
    case /* Message */6 :
        return c._0;
    
  }
}

var Messages = {
  non_terminated_string: non_terminated_string,
  non_terminated_template: non_terminated_template,
  unknown_character: unknown_character,
  unexpected_token: unexpected_token,
  expected_ident: expected_ident,
  expected_uppercase_ident: expected_uppercase_ident,
  expected_lowercase_ident: expected_lowercase_ident,
  expected_token: expected_token,
  make: make$1
};

function print(t) {
  var position_0 = t.start_pos;
  var position_1 = t.end_pos;
  var position = [
    position_0,
    position_1
  ];
  var message = make$1(t);
  var print_pos = function (positions) {
    var get_loc = function (param) {
      var end_pos = param[1];
      var start_pos = param[0];
      var start_line = String(start_pos.line);
      var start_col = String(start_pos.column);
      var end_line = String(end_pos.line);
      var end_col = String(end_pos.column);
      if (start_pos.line === end_pos.line) {
        if (start_pos.column === end_pos.column) {
          return "at line " + (start_line + (", column " + start_col));
        } else {
          return "at line " + (start_line + (" from column " + (start_col + (" to " + end_col))));
        }
      } else {
        return "from line " + (start_line + (", column " + (start_col + (" to line " + (end_line + (", column " + end_col))))));
      }
    };
    return positions[0].filename + (" " + get_loc(positions));
  };
  console.error(print_pos(position));
  console.error(message);
}

var Reporter = {
  print: print
};

function report(start_pos, end_pos, typ) {
  print({
        start_pos: start_pos,
        end_pos: end_pos,
        typ: typ
      });
  return Stdlib.exit(1);
}

export {
  make ,
  Messages ,
  Reporter ,
  report ,
}
/* No side effect */
