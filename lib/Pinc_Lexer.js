// Generated by Melange

import * as $$Buffer from "bs-platform/lib/es6/buffer.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pinc_Token from "./Pinc_Token.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_string from "bs-platform/lib/es6/caml_string.js";
import * as Pinc_Position from "./Pinc_Position.js";
import * as Pinc_Diagnostics from "./Pinc_Diagnostics.js";

function make_position(a) {
  return Pinc_Position.make(a.filename, a.line, a.column + 1 | 0);
}

function current_mode(t) {
  var match = t.mode;
  if (!match) {
    return /* Normal */0;
  }
  switch (match.hd) {
    case /* Normal */0 :
        return /* Normal */0;
    case /* String */1 :
        return /* String */1;
    case /* TemplateAttributes */2 :
        return /* TemplateAttributes */2;
    case /* ComponentAttributes */3 :
        return /* ComponentAttributes */3;
    case /* Template */4 :
        return /* Template */4;
    
  }
}

function setMode(mode, t) {
  t.mode = {
    hd: mode,
    tl: t.mode
  };
}

function popMode(mode, t) {
  var match = t.mode;
  if (match && match.hd === mode) {
    t.mode = match.tl;
    return ;
  }
  
}

function next(t) {
  var next_offset = t.offset + 1 | 0;
  var match = t.current;
  if (typeof match === "string" || !(match.NAME === "Chr" && match.VAL === 10)) {
    
  } else {
    t.line_offset = next_offset;
    t.line = t.line + 1 | 0;
  }
  t.column = next_offset - t.line_offset | 0;
  t.offset = next_offset;
  t.prev = t.current;
  t.current = next_offset < t.src_length ? ({
        NAME: "Chr",
        VAL: t.src.charCodeAt(next_offset)
      }) : "EOF";
}

function next_n(n, t) {
  for(var _for = 1; _for <= n; ++_for){
    next(t);
  }
}

function peek(nOpt, t) {
  var n = nOpt !== undefined ? nOpt : 1;
  if ((t.offset + n | 0) < t.src_length) {
    return {
            NAME: "Chr",
            VAL: t.src.charCodeAt(t.offset + n | 0)
          };
  } else {
    return "EOF";
  }
}

function make(filename, src) {
  return {
          filename: filename,
          src: src,
          src_length: src.length,
          prev: "EOF",
          current: src === "" ? "EOF" : ({
                NAME: "Chr",
                VAL: src.charCodeAt(0)
              }),
          offset: 0,
          line_offset: 0,
          line: 1,
          column: 0,
          mode: {
            hd: /* Normal */0,
            tl: /* [] */0
          }
        };
}

function is_whitespace(param) {
  if (typeof param === "string") {
    return false;
  }
  if (param.NAME !== "Chr") {
    return false;
  }
  var match = param.VAL;
  if (match > 13 || match < 9) {
    return match === 32;
  } else {
    return !(match === 12 || match === 11);
  }
}

function skip_whitespace(t) {
  while(true) {
    if (!is_whitespace(t.current)) {
      return ;
    }
    next(t);
    continue ;
  };
}

function scan_ident(t) {
  var buf = $$Buffer.create(32);
  var loop = function (t) {
    while(true) {
      var match = t.current;
      var c;
      if (typeof match === "string") {
        return ;
      }
      if (match.NAME !== "Chr") {
        return ;
      }
      var c$1 = match.VAL;
      if (c$1 >= 91) {
        if (c$1 >= 97) {
          if (c$1 >= 123) {
            return ;
          }
          c = c$1;
        } else {
          if (c$1 !== 95) {
            return ;
          }
          c = c$1;
        }
      } else if (c$1 >= 58) {
        if (c$1 < 65) {
          return ;
        }
        c = c$1;
      } else {
        if (c$1 < 48) {
          return ;
        }
        c = c$1;
      }
      next(t);
      $$Buffer.add_char(buf, c);
      continue ;
    };
  };
  loop(t);
  return Pinc_Token.lookup_keyword($$Buffer.contents(buf));
}

function scan_string(start_pos, t) {
  var buf = $$Buffer.create(512);
  var loop = function (t) {
    while(true) {
      var match = t.current;
      if (typeof match === "string") {
        return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedString */0);
      }
      var c = match.VAL;
      if (c === 34) {
        return ;
      }
      if (c !== 92) {
        if (c === 123 && Caml_obj.caml_equal(peek(undefined, t), {
                NAME: "Chr",
                VAL: /* '|' */124
              })) {
          return ;
        }
        
      } else {
        var match$1 = peek(undefined, t);
        if (typeof match$1 === "string") {
          return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedString */0);
        }
        var match$2 = match$1.VAL;
        var exit = 0;
        if (match$2 >= 40) {
          switch (match$2) {
            case 92 :
                exit = 2;
                break;
            case 98 :
                next_n(2, t);
                $$Buffer.add_char(buf, /* '\b' */8);
                continue ;
            case 102 :
                next_n(2, t);
                $$Buffer.add_char(buf, /* '\012' */12);
                continue ;
            case 110 :
                next_n(2, t);
                $$Buffer.add_char(buf, /* '\n' */10);
                continue ;
            case 114 :
                next_n(2, t);
                $$Buffer.add_char(buf, /* '\r' */13);
                continue ;
            case 93 :
            case 94 :
            case 95 :
            case 96 :
            case 97 :
            case 99 :
            case 100 :
            case 101 :
            case 103 :
            case 104 :
            case 105 :
            case 106 :
            case 107 :
            case 108 :
            case 109 :
            case 111 :
            case 112 :
            case 113 :
            case 115 :
                exit = 3;
                break;
            case 116 :
                next_n(2, t);
                $$Buffer.add_char(buf, /* '\t' */9);
                continue ;
            default:
              exit = 3;
          }
        } else if (match$2 >= 32) {
          switch (match$2) {
            case 32 :
                exit = 2;
                break;
            case 34 :
                next_n(2, t);
                $$Buffer.add_char(buf, /* '"' */34);
                continue ;
            case 33 :
            case 35 :
            case 36 :
            case 37 :
            case 38 :
                exit = 3;
                break;
            case 39 :
                next_n(2, t);
                $$Buffer.add_char(buf, /* '\'' */39);
                continue ;
            
          }
        } else {
          exit = 3;
        }
        switch (exit) {
          case 2 :
              next_n(2, t);
              $$Buffer.add_char(buf, /* '\\' */92);
              continue ;
          case 3 :
              return Pinc_Diagnostics.report(make_position(t), make_position(t), {
                          TAG: /* Message */6,
                          _0: "Unknown escape sequence in string."
                        });
          
        }
      }
      next(t);
      $$Buffer.add_char(buf, c);
      continue ;
    };
  };
  loop(t);
  return {
          TAG: /* STRING */4,
          _0: $$Buffer.contents(buf)
        };
}

function scan_tag(t) {
  var start_pos = make_position(t);
  var buf = $$Buffer.create(32);
  var loop = function (t) {
    while(true) {
      var match = t.current;
      var c;
      if (typeof match === "string") {
        return ;
      }
      if (match.NAME !== "Chr") {
        return ;
      }
      var c$1 = match.VAL;
      if (c$1 >= 91) {
        if (c$1 >= 97) {
          if (c$1 >= 123) {
            return ;
          }
          c = c$1;
        } else {
          if (c$1 !== 95) {
            return ;
          }
          c = c$1;
        }
      } else if (c$1 >= 58) {
        if (c$1 < 65) {
          return ;
        }
        c = c$1;
      } else {
        if (c$1 < 48) {
          return ;
        }
        c = c$1;
      }
      next(t);
      $$Buffer.add_char(buf, c);
      continue ;
    };
  };
  loop(t);
  var found = $$Buffer.contents(buf);
  var match = Caml_string.get(found, 0);
  if (match > 90 || match < 65) {
    return Pinc_Diagnostics.report(start_pos, make_position(t), {
                TAG: /* Message */6,
                _0: "Invalid Tag! Tags have to start with an uppercase character. Did you mean to write #" + ($$String.capitalize_ascii(found) + "?")
              });
  } else {
    return found;
  }
}

function get_html_tag_ident(t) {
  var start_pos = make_position(t);
  var loop = function (buf, t) {
    while(true) {
      var match = t.current;
      var c;
      if (typeof match === "string") {
        return $$Buffer.contents(buf);
      }
      if (match.NAME !== "Chr") {
        return $$Buffer.contents(buf);
      }
      var c$1 = match.VAL;
      if (c$1 < 58) {
        if (c$1 !== 45) {
          if (c$1 < 48) {
            return $$Buffer.contents(buf);
          }
          c = c$1;
        } else {
          c = c$1;
        }
      } else {
        if (c$1 > 122 || c$1 < 97) {
          return $$Buffer.contents(buf);
        }
        c = c$1;
      }
      next(t);
      $$Buffer.add_char(buf, c);
      continue ;
    };
  };
  var buf = $$Buffer.create(32);
  var ident = loop(buf, t);
  skip_whitespace(t);
  var match = Caml_string.get(ident, 0);
  if (match > 122 || match < 97) {
    return Pinc_Diagnostics.report(start_pos, make_position(t), {
                TAG: /* Message */6,
                _0: "Invalid HTML tag! HTML tags have to start with a lowercase letter. Instead saw: " + ident
              });
  } else {
    return ident;
  }
}

function get_uppercase_ident(t) {
  var buf = $$Buffer.create(32);
  while(true) {
    var match = t.current;
    var c;
    if (typeof match === "string") {
      return $$Buffer.contents(buf);
    }
    if (match.NAME !== "Chr") {
      return $$Buffer.contents(buf);
    }
    var c$1 = match.VAL;
    if (c$1 >= 91) {
      if (c$1 >= 97) {
        if (c$1 >= 123) {
          return $$Buffer.contents(buf);
        }
        c = c$1;
      } else {
        if (c$1 !== 95) {
          return $$Buffer.contents(buf);
        }
        c = c$1;
      }
    } else if (c$1 >= 58) {
      if (c$1 < 65) {
        return $$Buffer.contents(buf);
      }
      c = c$1;
    } else {
      if (c$1 < 48) {
        return $$Buffer.contents(buf);
      }
      c = c$1;
    }
    next(t);
    $$Buffer.add_char(buf, c);
    continue ;
  };
}

function scan_component_open_tag(t) {
  var start_pos = make_position(t);
  next(t);
  var match = t.current;
  if (typeof match === "string") {
    return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
  }
  var c = match.VAL;
  if (c > 90 || c < 65) {
    return Pinc_Diagnostics.report(start_pos, make_position(t), {
                TAG: /* Message */6,
                _0: "Invalid Component tag! Component tags have to start with an uppercase letter. Instead saw: " + $$String.make(1, c)
              });
  } else {
    return {
            TAG: /* COMPONENT_OPEN_TAG */8,
            _0: get_uppercase_ident(t)
          };
  }
}

function scan_open_tag(t) {
  var start_pos = make_position(t);
  next(t);
  var match = t.current;
  if (typeof match === "string") {
    return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
  }
  var c = match.VAL;
  if (c > 122 || c < 97) {
    return Pinc_Diagnostics.report(start_pos, make_position(t), {
                TAG: /* Message */6,
                _0: "Invalid Template tag! Template tags have to start with a lowercase letter. Instead saw: " + $$String.make(1, c)
              });
  } else {
    return {
            TAG: /* HTML_OPEN_TAG */6,
            _0: get_html_tag_ident(t)
          };
  }
}

function scan_component_close_tag(t) {
  var start_pos = make_position(t);
  next_n(2, t);
  var match = t.current;
  var close_tag;
  if (typeof match === "string") {
    close_tag = Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
  } else {
    var c = match.VAL;
    close_tag = c > 90 || c < 65 ? Pinc_Diagnostics.report(start_pos, make_position(t), {
            TAG: /* Message */6,
            _0: "Invalid Component tag! Component tags have to start with an uppercase letter. Instead saw: " + $$String.make(1, c)
          }) : get_uppercase_ident(t);
  }
  var match$1 = t.current;
  if (typeof match$1 !== "string" && match$1.NAME === "Chr" && match$1.VAL === 62) {
    next(t);
    return {
            TAG: /* COMPONENT_CLOSE_TAG */9,
            _0: close_tag
          };
  }
  return Pinc_Diagnostics.report(start_pos, make_position(t), {
              TAG: /* ExpectedToken */5,
              _0: /* GREATER */25
            });
}

function scan_close_tag(t) {
  var start_pos = make_position(t);
  next_n(2, t);
  var match = t.current;
  var close_tag;
  if (typeof match === "string") {
    close_tag = Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
  } else {
    var c = match.VAL;
    close_tag = c > 122 || c < 97 ? Pinc_Diagnostics.report(start_pos, make_position(t), {
            TAG: /* Message */6,
            _0: "Invalid Template tag! Template tags have to start with a lowercase letter. Instead saw: " + $$String.make(1, c)
          }) : ({
          TAG: /* HTML_CLOSE_TAG */7,
          _0: get_html_tag_ident(t)
        });
  }
  var match$1 = t.current;
  if (typeof match$1 !== "string" && match$1.NAME === "Chr" && match$1.VAL === 62) {
    next(t);
    return close_tag;
  }
  return Pinc_Diagnostics.report(start_pos, make_position(t), {
              TAG: /* ExpectedToken */5,
              _0: /* GREATER */25
            });
}

function scan_template_text(t) {
  var start_pos = make_position(t);
  var loop = function (buf, t) {
    while(true) {
      var match = t.current;
      if (typeof match === "string") {
        return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
      }
      var c = match.VAL;
      if (c !== 60) {
        if (c === 123) {
          return $$Buffer.contents(buf);
        }
        next(t);
        $$Buffer.add_char(buf, c);
        continue ;
      }
      var match$1 = peek(undefined, t);
      if (typeof match$1 !== "string" && match$1.NAME === "Chr") {
        var match$2 = match$1.VAL;
        if (match$2 < 91) {
          if (match$2 === 47) {
            return $$Buffer.contents(buf);
          }
          if (match$2 >= 65) {
            return $$Buffer.contents(buf);
          }
          
        } else if (!(match$2 > 122 || match$2 < 97)) {
          return $$Buffer.contents(buf);
        }
        
      }
      next(t);
      $$Buffer.add_char(buf, /* '<' */60);
      continue ;
    };
  };
  var buf = $$Buffer.create(32);
  var found = loop(buf, t);
  return {
          TAG: /* STRING */4,
          _0: found
        };
}

function scan_html_attribute_ident(t) {
  var loop = function (buf, t) {
    while(true) {
      var match = t.current;
      var c;
      if (typeof match === "string") {
        return $$Buffer.contents(buf);
      }
      if (match.NAME !== "Chr") {
        return $$Buffer.contents(buf);
      }
      var c$1 = match.VAL;
      if (c$1 >= 59) {
        if (c$1 >= 91) {
          if (c$1 > 122 || c$1 < 97) {
            return $$Buffer.contents(buf);
          }
          c = c$1;
        } else {
          if (c$1 < 65) {
            return $$Buffer.contents(buf);
          }
          c = c$1;
        }
      } else if (c$1 >= 48) {
        c = c$1;
      } else {
        if (c$1 !== 45) {
          return $$Buffer.contents(buf);
        }
        c = c$1;
      }
      next(t);
      $$Buffer.add_char(buf, c);
      continue ;
    };
  };
  var buf = $$Buffer.create(32);
  return Pinc_Token.lookup_keyword(loop(buf, t));
}

function scan_number(t) {
  var result = $$Buffer.create(5);
  var scan_digits = function (t) {
    while(true) {
      var match = t.current;
      if (typeof match === "string") {
        return ;
      }
      if (match.NAME !== "Chr") {
        return ;
      }
      var c = match.VAL;
      if (c >= 58) {
        if (c !== 95) {
          return ;
        }
        next(t);
        continue ;
      }
      if (c < 48) {
        return ;
      }
      $$Buffer.add_char(result, c);
      next(t);
      continue ;
    };
  };
  scan_digits(t);
  var match = t.current;
  var is_float;
  if (typeof match === "string" || !(match.NAME === "Chr" && match.VAL === 46)) {
    is_float = false;
  } else {
    var match$1 = peek(undefined, t);
    var exit = 0;
    if (typeof match$1 === "string" || !(match$1.NAME === "Chr" && match$1.VAL === 46)) {
      exit = 1;
    } else {
      is_float = false;
    }
    if (exit === 1) {
      $$Buffer.add_char(result, /* '.' */46);
      next(t);
      scan_digits(t);
      is_float = true;
    }
    
  }
  var match$2 = t.current;
  var is_float$1;
  var exit$1 = 0;
  if (typeof match$2 === "string" || match$2.NAME !== "Chr") {
    is_float$1 = is_float;
  } else {
    var match$3 = match$2.VAL;
    if (match$3 !== 69 && match$3 !== 101) {
      is_float$1 = is_float;
    } else {
      exit$1 = 1;
    }
  }
  if (exit$1 === 1) {
    $$Buffer.add_char(result, /* 'e' */101);
    next(t);
    var match$4 = t.current;
    if (typeof match$4 !== "string" && match$4.NAME === "Chr") {
      switch (match$4.VAL) {
        case 43 :
            $$Buffer.add_char(result, /* '+' */43);
            next(t);
            break;
        case 44 :
            break;
        case 45 :
            $$Buffer.add_char(result, /* '-' */45);
            next(t);
            break;
        default:
          
      }
    }
    scan_digits(t);
    is_float$1 = true;
  }
  var result$1 = $$Buffer.contents(result);
  if (is_float$1) {
    return {
            TAG: /* FLOAT */3,
            _0: Caml_format.caml_float_of_string(result$1)
          };
  } else {
    return {
            TAG: /* INT */2,
            _0: Caml_format.caml_int_of_string(result$1)
          };
  }
}

function skip_comment(t) {
  while(true) {
    var match = t.current;
    if (typeof match === "string") {
      return ;
    }
    var match$1 = match.VAL;
    if (match$1 === 10) {
      return ;
    }
    if (match$1 === 13) {
      return ;
    }
    next(t);
    continue ;
  };
}

function scan_template_token(start_pos, t) {
  var match = t.current;
  if (typeof match === "string") {
    return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
  }
  var match$1 = match.VAL;
  if (match$1 < 63) {
    if (match$1 !== 47) {
      if (match$1 < 60) {
        return scan_template_text(t);
      }
      switch (match$1) {
        case 60 :
            var match$2 = peek(undefined, t);
            if (typeof match$2 === "string") {
              return scan_template_text(t);
            }
            if (match$2.NAME !== "Chr") {
              return scan_template_text(t);
            }
            var match$3 = match$2.VAL;
            if (match$3 >= 63) {
              if (match$3 >= 91) {
                if (match$3 > 122 || match$3 < 97) {
                  return scan_template_text(t);
                } else {
                  setMode(/* Template */4, t);
                  setMode(/* TemplateAttributes */2, t);
                  return scan_open_tag(t);
                }
              } else if (match$3 >= 65) {
                setMode(/* Template */4, t);
                setMode(/* ComponentAttributes */3, t);
                return scan_component_open_tag(t);
              } else {
                return scan_template_text(t);
              }
            }
            if (match$3 !== 47) {
              if (match$3 >= 62) {
                next_n(2, t);
                setMode(/* Template */4, t);
                return /* HTML_OPEN_FRAGMENT */58;
              } else {
                return scan_template_text(t);
              }
            }
            popMode(/* Template */4, t);
            var match$4 = peek(2, t);
            if (typeof match$4 === "string") {
              return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
            }
            var c = match$4.VAL;
            if (c < 91) {
              if (c !== 62) {
                if (c >= 65) {
                  return scan_component_close_tag(t);
                }
                
              } else {
                next_n(3, t);
                return /* HTML_CLOSE_FRAGMENT */59;
              }
            } else if (!(c > 122 || c < 97)) {
              return scan_close_tag(t);
            }
            return Pinc_Diagnostics.report(start_pos, make_position(t), {
                        TAG: /* Message */6,
                        _0: "Invalid Template tag! Template tags have to start with an uppercase or lowercase letter. Instead saw: " + $$String.make(1, c)
                      });
            break;
        case 61 :
            return scan_template_text(t);
        case 62 :
            next(t);
            return /* HTML_OR_COMPONENT_TAG_END */61;
        
      }
    } else {
      var match$5 = peek(undefined, t);
      if (typeof match$5 === "string") {
        return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
      }
      var c$1 = match$5.VAL;
      if (c$1 !== 62) {
        return Pinc_Diagnostics.report(start_pos, make_position(t), {
                    TAG: /* UnknownCharacter */0,
                    _0: c$1
                  });
      } else {
        popMode(/* Template */4, t);
        next_n(2, t);
        return /* HTML_OR_COMPONENT_TAG_SELF_CLOSING */60;
      }
    }
  } else {
    switch (match$1) {
      case 123 :
          setMode(/* Normal */0, t);
          next(t);
          return /* LEFT_BRACE */5;
      case 124 :
          return scan_template_text(t);
      case 125 :
          popMode(/* Normal */0, t);
          next(t);
          return /* RIGHT_BRACE */6;
      default:
        return scan_template_text(t);
    }
  }
}

function scan_token(start_pos, t) {
  var match = current_mode(t);
  switch (match) {
    case /* Normal */0 :
        var match$1 = t.current;
        if (typeof match$1 === "string") {
          return /* END_OF_INPUT */62;
        }
        var c = match$1.VAL;
        switch (c) {
          case 33 :
              var match$2 = peek(undefined, t);
              if (typeof match$2 === "string" || !(match$2.NAME === "Chr" && match$2.VAL === 61)) {
                next(t);
                return /* NOT */24;
              } else {
                next_n(2, t);
                return /* NOT_EQUAL */36;
              }
          case 34 :
              next(t);
              setMode(/* String */1, t);
              return /* DOUBLE_QUOTE */9;
          case 35 :
              var match$3 = peek(undefined, t);
              var exit = 0;
              if (typeof match$3 === "string") {
                exit = 2;
              } else {
                if (match$3.NAME === "Chr" && (match$3.VAL - 65 >>> 0) <= 25) {
                  next(t);
                  return {
                          TAG: /* TAG */5,
                          _0: scan_tag(t)
                        };
                }
                exit = 2;
              }
              if (exit === 2) {
                return Pinc_Diagnostics.report(start_pos, make_position(t), {
                            TAG: /* UnknownCharacter */0,
                            _0: /* '#' */35
                          });
              }
              break;
          case 37 :
              next(t);
              return /* PERCENT */33;
          case 38 :
              var match$4 = peek(undefined, t);
              var exit$1 = 0;
              if (typeof match$4 === "string") {
                exit$1 = 2;
              } else {
                if (match$4.NAME === "Chr" && match$4.VAL === 38) {
                  next_n(2, t);
                  return /* LOGICAL_AND */34;
                }
                exit$1 = 2;
              }
              if (exit$1 === 2) {
                return Pinc_Diagnostics.report(start_pos, make_position(t), {
                            TAG: /* UnknownCharacter */0,
                            _0: /* '&' */38
                          });
              }
              break;
          case 40 :
              next(t);
              return /* LEFT_PAREN */1;
          case 41 :
              next(t);
              return /* RIGHT_PAREN */2;
          case 42 :
              var match$5 = peek(undefined, t);
              if (typeof match$5 === "string" || !(match$5.NAME === "Chr" && match$5.VAL === 42)) {
                next(t);
                return /* STAR */30;
              } else {
                next_n(2, t);
                return /* STAR_STAR */31;
              }
          case 43 :
              var match$6 = peek(undefined, t);
              if (typeof match$6 === "string" || !(match$6.NAME === "Chr" && match$6.VAL === 43)) {
                next(t);
                return /* PLUS */27;
              } else {
                next_n(2, t);
                return /* PLUSPLUS */40;
              }
          case 44 :
              next(t);
              return /* COMMA */12;
          case 45 :
              if (is_whitespace(peek(undefined, t))) {
                next(t);
                return /* MINUS */29;
              }
              var match$7 = peek(undefined, t);
              if (typeof match$7 === "string" || !(match$7.NAME === "Chr" && match$7.VAL === 62)) {
                next(t);
                return /* UNARY_MINUS */28;
              } else {
                next_n(2, t);
                return /* ARROW */17;
              }
          case 46 :
              var match$8 = peek(undefined, t);
              if (typeof match$8 === "string") {
                next(t);
                return /* DOT */14;
              }
              if (match$8.NAME === "Chr") {
                var match$9 = match$8.VAL;
                if (match$9 >= 48) {
                  if (match$9 >= 58) {
                    next(t);
                    return /* DOT */14;
                  } else {
                    return scan_number(t);
                  }
                }
                if (match$9 !== 46) {
                  next(t);
                  return /* DOT */14;
                }
                var match$10 = peek(2, t);
                if (typeof match$10 === "string" || !(match$10.NAME === "Chr" && match$10.VAL === 46)) {
                  next_n(2, t);
                  return /* DOTDOT */15;
                } else {
                  next_n(3, t);
                  return /* DOTDOTDOT */16;
                }
              }
              next(t);
              return /* DOT */14;
          case 47 :
              var match$11 = peek(undefined, t);
              if (typeof match$11 === "string" || !(match$11.NAME === "Chr" && match$11.VAL === 47)) {
                next(t);
                return /* SLASH */32;
              } else {
                skip_comment(t);
                return /* COMMENT */0;
              }
          case 48 :
          case 49 :
          case 50 :
          case 51 :
          case 52 :
          case 53 :
          case 54 :
          case 55 :
          case 56 :
          case 57 :
              return scan_number(t);
          case 58 :
              var match$12 = peek(undefined, t);
              if (typeof match$12 === "string") {
                next(t);
                return /* COLON */10;
              }
              if (match$12.NAME === "Chr") {
                var match$13 = match$12.VAL;
                if (match$13 !== 58) {
                  if (match$13 !== 61) {
                    next(t);
                    return /* COLON */10;
                  } else {
                    next_n(2, t);
                    return /* COLON_EQUAL */23;
                  }
                } else {
                  next_n(2, t);
                  return /* DOUBLE_COLON */11;
                }
              }
              next(t);
              return /* COLON */10;
          case 59 :
              next(t);
              return /* SEMICOLON */13;
          case 60 :
              var c$1 = peek(undefined, t);
              var exit$2 = 0;
              var exit$3 = 0;
              if (typeof c$1 === "string" || c$1.NAME !== "Chr") {
                exit$3 = 3;
              } else {
                var match$14 = c$1.VAL;
                if (match$14 >= 63) {
                  if (match$14 >= 91) {
                    if (match$14 > 122 || match$14 < 97) {
                      exit$3 = 3;
                    } else {
                      setMode(/* Template */4, t);
                      setMode(/* TemplateAttributes */2, t);
                      return scan_open_tag(t);
                    }
                  } else {
                    if (match$14 >= 65) {
                      setMode(/* Template */4, t);
                      setMode(/* ComponentAttributes */3, t);
                      return scan_component_open_tag(t);
                    }
                    exit$3 = 3;
                  }
                } else {
                  if (match$14 >= 61) {
                    if (match$14 >= 62) {
                      next_n(2, t);
                      return /* HTML_OPEN_FRAGMENT */58;
                    } else {
                      next_n(2, t);
                      return /* LESS_EQUAL */39;
                    }
                  }
                  if (match$14 !== 45) {
                    exit$3 = 3;
                  } else {
                    next_n(2, t);
                    return /* ARROW_LEFT */18;
                  }
                }
              }
              if (exit$3 === 3) {
                if (is_whitespace(t.prev) && is_whitespace(c$1)) {
                  next(t);
                  return /* LESS */26;
                }
                if (typeof c$1 === "string" || !(c$1.NAME === "Chr" && c$1.VAL === 47)) {
                  exit$2 = 2;
                } else {
                  popMode(/* Template */4, t);
                  var match$15 = peek(2, t);
                  if (typeof match$15 === "string") {
                    return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
                  }
                  var c$2 = match$15.VAL;
                  var exit$4 = 0;
                  if (c$2 < 91) {
                    if (c$2 !== 62) {
                      if (c$2 >= 65) {
                        return scan_component_close_tag(t);
                      }
                      exit$4 = 4;
                    } else {
                      next_n(3, t);
                      return /* HTML_CLOSE_FRAGMENT */59;
                    }
                  } else {
                    if (!(c$2 > 122 || c$2 < 97)) {
                      return scan_close_tag(t);
                    }
                    exit$4 = 4;
                  }
                  if (exit$4 === 4) {
                    return Pinc_Diagnostics.report(start_pos, make_position(t), {
                                TAG: /* Message */6,
                                _0: "Invalid Template tag! Template tags have to start with an uppercase or lowercase letter. Instead saw: " + $$String.make(1, c$2)
                              });
                  }
                  
                }
              }
              if (exit$2 === 2) {
                return Pinc_Diagnostics.report(start_pos, make_position(t), {
                            TAG: /* UnknownCharacter */0,
                            _0: /* '<' */60
                          });
              }
              break;
          case 61 :
              var match$16 = peek(undefined, t);
              if (typeof match$16 === "string" || !(match$16.NAME === "Chr" && match$16.VAL === 61)) {
                next(t);
                return /* EQUAL */22;
              } else {
                next_n(2, t);
                return /* EQUAL_EQUAL */37;
              }
          case 62 :
              var match$17 = peek(undefined, t);
              if (typeof match$17 === "string" || !(match$17.NAME === "Chr" && match$17.VAL === 61)) {
                next(t);
                return /* GREATER */25;
              } else {
                next_n(2, t);
                return /* GREATER_EQUAL */38;
              }
          case 63 :
              next(t);
              return /* QUESTIONMARK */21;
          case 64 :
              var match$18 = peek(undefined, t);
              var exit$5 = 0;
              if (typeof match$18 === "string") {
                exit$5 = 2;
              } else {
                if (match$18.NAME === "Chr" && match$18.VAL === 64) {
                  next_n(2, t);
                  return /* ATAT */20;
                }
                exit$5 = 2;
              }
              if (exit$5 === 2) {
                return Pinc_Diagnostics.report(start_pos, make_position(t), {
                            TAG: /* UnknownCharacter */0,
                            _0: /* '@' */64
                          });
              }
              break;
          case 91 :
              next(t);
              return /* LEFT_BRACK */3;
          case 93 :
              next(t);
              return /* RIGHT_BRACK */4;
          case 36 :
          case 39 :
          case 92 :
          case 94 :
          case 96 :
              break;
          case 65 :
          case 66 :
          case 67 :
          case 68 :
          case 69 :
          case 70 :
          case 71 :
          case 72 :
          case 73 :
          case 74 :
          case 75 :
          case 76 :
          case 77 :
          case 78 :
          case 79 :
          case 80 :
          case 81 :
          case 82 :
          case 83 :
          case 84 :
          case 85 :
          case 86 :
          case 87 :
          case 88 :
          case 89 :
          case 90 :
          case 95 :
          case 97 :
          case 98 :
          case 99 :
          case 100 :
          case 101 :
          case 102 :
          case 103 :
          case 104 :
          case 105 :
          case 106 :
          case 107 :
          case 108 :
          case 109 :
          case 110 :
          case 111 :
          case 112 :
          case 113 :
          case 114 :
          case 115 :
          case 116 :
          case 117 :
          case 118 :
          case 119 :
          case 120 :
          case 121 :
          case 122 :
              return scan_ident(t);
          case 123 :
              setMode(/* Normal */0, t);
              next(t);
              return /* LEFT_BRACE */5;
          case 124 :
              var match$19 = peek(undefined, t);
              var exit$6 = 0;
              if (typeof match$19 === "string" || match$19.NAME !== "Chr") {
                exit$6 = 2;
              } else {
                var match$20 = match$19.VAL;
                if (match$20 === 125 || match$20 === 124) {
                  if (match$20 >= 125) {
                    popMode(/* Normal */0, t);
                    next_n(2, t);
                    return /* RIGHT_PIPE_BRACE */8;
                  } else {
                    next_n(2, t);
                    return /* LOGICAL_OR */35;
                  }
                }
                if (match$20 !== 62) {
                  exit$6 = 2;
                } else {
                  next_n(2, t);
                  return /* PIPE */19;
                }
              }
              if (exit$6 === 2) {
                return Pinc_Diagnostics.report(start_pos, make_position(t), {
                            TAG: /* UnknownCharacter */0,
                            _0: /* '|' */124
                          });
              }
              break;
          case 125 :
              popMode(/* Normal */0, t);
              next(t);
              return /* RIGHT_BRACE */6;
          default:
            
        }
        return Pinc_Diagnostics.report(start_pos, make_position(t), {
                    TAG: /* UnknownCharacter */0,
                    _0: c
                  });
    case /* String */1 :
        var match$21 = t.current;
        if (typeof match$21 === "string") {
          return scan_string(start_pos, t);
        }
        if (match$21.NAME !== "Chr") {
          return scan_string(start_pos, t);
        }
        var match$22 = match$21.VAL;
        if (match$22 === 124 || match$22 === 123) {
          if (match$22 >= 124) {
            if (Caml_obj.caml_equal(peek(undefined, t), {
                    NAME: "Chr",
                    VAL: /* '}' */125
                  })) {
              popMode(/* Normal */0, t);
              next_n(2, t);
              return /* RIGHT_PIPE_BRACE */8;
            } else {
              return scan_string(start_pos, t);
            }
          } else if (Caml_obj.caml_equal(peek(undefined, t), {
                  NAME: "Chr",
                  VAL: /* '|' */124
                })) {
            setMode(/* Normal */0, t);
            next_n(2, t);
            return /* LEFT_PIPE_BRACE */7;
          } else {
            return scan_string(start_pos, t);
          }
        } else if (match$22 !== 34) {
          return scan_string(start_pos, t);
        } else {
          popMode(/* String */1, t);
          next(t);
          return /* DOUBLE_QUOTE */9;
        }
    case /* TemplateAttributes */2 :
        var match$23 = t.current;
        if (typeof match$23 === "string") {
          return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
        }
        var match$24 = match$23.VAL;
        if (match$24 >= 62) {
          if (match$24 < 91) {
            if (match$24 >= 63) {
              if (match$24 >= 65) {
                return scan_html_attribute_ident(t);
              } else {
                return scan_template_text(t);
              }
            } else {
              popMode(/* TemplateAttributes */2, t);
              return scan_template_token(start_pos, t);
            }
          }
          if (match$24 < 123) {
            if (match$24 >= 97) {
              return scan_html_attribute_ident(t);
            } else {
              return scan_template_text(t);
            }
          }
          if (match$24 >= 126) {
            return scan_template_text(t);
          }
          switch (match$24) {
            case 123 :
                setMode(/* Normal */0, t);
                next(t);
                return /* LEFT_BRACE */5;
            case 124 :
                return scan_template_text(t);
            case 125 :
                popMode(/* Normal */0, t);
                next(t);
                return /* RIGHT_BRACE */6;
            
          }
        } else {
          if (match$24 !== 34) {
            if (match$24 !== 47) {
              if (match$24 >= 61) {
                next(t);
                return /* EQUAL */22;
              } else {
                return scan_template_text(t);
              }
            }
            var match$25 = peek(undefined, t);
            if (typeof match$25 === "string") {
              return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
            }
            var c$3 = match$25.VAL;
            if (c$3 !== 62) {
              return Pinc_Diagnostics.report(start_pos, make_position(t), {
                          TAG: /* UnknownCharacter */0,
                          _0: c$3
                        });
            } else {
              popMode(/* TemplateAttributes */2, t);
              return scan_template_token(start_pos, t);
            }
          }
          next(t);
          setMode(/* String */1, t);
          return /* DOUBLE_QUOTE */9;
        }
    case /* ComponentAttributes */3 :
        var match$26 = t.current;
        if (typeof match$26 === "string") {
          return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
        }
        var match$27 = match$26.VAL;
        if (match$27 >= 62) {
          if (match$27 < 97) {
            if (match$27 !== 95) {
              if (match$27 >= 63) {
                return scan_template_text(t);
              } else {
                popMode(/* ComponentAttributes */3, t);
                return scan_template_token(start_pos, t);
              }
            } else {
              return scan_ident(t);
            }
          }
          if (match$27 < 123) {
            return scan_ident(t);
          }
          if (match$27 >= 126) {
            return scan_template_text(t);
          }
          switch (match$27) {
            case 123 :
                setMode(/* Normal */0, t);
                next(t);
                return /* LEFT_BRACE */5;
            case 124 :
                return scan_template_text(t);
            case 125 :
                popMode(/* Normal */0, t);
                next(t);
                return /* RIGHT_BRACE */6;
            
          }
        } else {
          if (match$27 !== 34) {
            if (match$27 !== 47) {
              if (match$27 >= 61) {
                next(t);
                return /* EQUAL */22;
              } else {
                return scan_template_text(t);
              }
            }
            var match$28 = peek(undefined, t);
            if (typeof match$28 === "string") {
              return Pinc_Diagnostics.report(start_pos, make_position(t), /* NonTerminatedTemplate */1);
            }
            var c$4 = match$28.VAL;
            if (c$4 !== 62) {
              return Pinc_Diagnostics.report(start_pos, make_position(t), {
                          TAG: /* UnknownCharacter */0,
                          _0: c$4
                        });
            } else {
              popMode(/* ComponentAttributes */3, t);
              return scan_template_token(start_pos, t);
            }
          }
          next(t);
          setMode(/* String */1, t);
          return /* DOUBLE_QUOTE */9;
        }
    case /* Template */4 :
        return scan_template_token(start_pos, t);
    
  }
}

function scan(t) {
  if (!(current_mode(t) === /* Template */4 || current_mode(t) === /* String */1)) {
    skip_whitespace(t);
  }
  var start_pos = make_position(t);
  var token = scan_token(start_pos, t);
  var end_pos = make_position(t);
  return Pinc_Token.make(start_pos, end_pos, token);
}

export {
  make ,
  scan ,
  make_position ,
}
/* No side effect */
