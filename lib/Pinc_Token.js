// Generated by Melange

import * as Stdlib from "bs-platform/lib/es6/stdlib.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_string from "bs-platform/lib/es6/caml_string.js";

function make(start_pos, end_pos, typ) {
  return {
          typ: typ,
          start_pos: start_pos,
          end_pos: end_pos
        };
}

function to_string(f) {
  if (typeof f === "number") {
    switch (f) {
      case /* COMMENT */0 :
          return "// Comment";
      case /* LEFT_PAREN */1 :
          return "(";
      case /* RIGHT_PAREN */2 :
          return ")";
      case /* LEFT_BRACK */3 :
          return "[";
      case /* RIGHT_BRACK */4 :
          return "]";
      case /* LEFT_BRACE */5 :
          return "{";
      case /* RIGHT_BRACE */6 :
          return "}";
      case /* LEFT_PIPE_BRACE */7 :
          return "{|";
      case /* RIGHT_PIPE_BRACE */8 :
          return "|}";
      case /* DOUBLE_QUOTE */9 :
          return "\"";
      case /* COLON */10 :
          return ":";
      case /* DOUBLE_COLON */11 :
          return "::";
      case /* COMMA */12 :
          return ",";
      case /* SEMICOLON */13 :
          return ";";
      case /* DOT */14 :
          return ".";
      case /* DOTDOT */15 :
          return "..";
      case /* DOTDOTDOT */16 :
          return "...";
      case /* ARROW */17 :
          return "->";
      case /* ARROW_LEFT */18 :
          return "<-";
      case /* PIPE */19 :
          return "|>";
      case /* ATAT */20 :
          return "@@";
      case /* QUESTIONMARK */21 :
          return "?";
      case /* EQUAL */22 :
          return "=";
      case /* COLON_EQUAL */23 :
          return ":=";
      case /* NOT */24 :
          return "!";
      case /* GREATER */25 :
          return ">";
      case /* LESS */26 :
          return "<";
      case /* PLUS */27 :
          return "+";
      case /* UNARY_MINUS */28 :
      case /* MINUS */29 :
          return "-";
      case /* STAR */30 :
          return "*";
      case /* STAR_STAR */31 :
          return "**";
      case /* SLASH */32 :
          return "/";
      case /* PERCENT */33 :
          return "%";
      case /* LOGICAL_AND */34 :
          return "&&";
      case /* LOGICAL_OR */35 :
          return "||";
      case /* NOT_EQUAL */36 :
          return "!=";
      case /* EQUAL_EQUAL */37 :
          return "==";
      case /* GREATER_EQUAL */38 :
          return ">=";
      case /* LESS_EQUAL */39 :
          return "<=";
      case /* PLUSPLUS */40 :
          return "++";
      case /* KEYWORD_FN */41 :
          return "fn";
      case /* KEYWORD_LET */42 :
          return "let";
      case /* KEYWORD_MUTABLE */43 :
          return "mutable";
      case /* KEYWORD_TRUE */44 :
          return "true";
      case /* KEYWORD_FALSE */45 :
          return "false";
      case /* KEYWORD_IF */46 :
          return "if";
      case /* KEYWORD_ELSE */47 :
          return "else";
      case /* KEYWORD_FOR */48 :
          return "for";
      case /* KEYWORD_IN */49 :
          return "in";
      case /* KEYWORD_REVERSE */50 :
          return "reverse";
      case /* KEYWORD_BREAK */51 :
          return "break";
      case /* KEYWORD_CONTINUE */52 :
          return "continue";
      case /* KEYWORD_COMPONENT */53 :
          return "component";
      case /* KEYWORD_SITE */54 :
          return "site";
      case /* KEYWORD_PAGE */55 :
          return "page";
      case /* KEYWORD_STORE */56 :
          return "store";
      case /* HTML_OPEN_FRAGMENT */57 :
          return "<>";
      case /* HTML_CLOSE_FRAGMENT */58 :
          return "</>";
      case /* HTML_OR_COMPONENT_TAG_SELF_CLOSING */59 :
          return "/>";
      case /* HTML_OR_COMPONENT_TAG_END */60 :
          return "> (TAG END)";
      case /* END_OF_INPUT */61 :
          return "(EOF)";
      
    }
  } else {
    switch (f.TAG | 0) {
      case /* IDENT_LOWER */0 :
          return $$String.lowercase_ascii(f._0);
      case /* IDENT_UPPER */1 :
          return $$String.capitalize_ascii(f._0);
      case /* INT */2 :
          return String(f._0);
      case /* FLOAT */3 :
          return Stdlib.string_of_float(f._0);
      case /* STRING */4 :
          return "\"" + (f._0 + "\"");
      case /* TAG */5 :
          return "#" + $$String.capitalize_ascii(f._0);
      case /* HTML_OPEN_TAG */6 :
      case /* COMPONENT_OPEN_TAG */8 :
          return "<" + f._0;
      case /* HTML_CLOSE_TAG */7 :
      case /* COMPONENT_CLOSE_TAG */9 :
          return "</" + f._0;
      
    }
  }
}

function is_keyword(param) {
  if (typeof param === "number" && !(param > 56 || param < 41)) {
    return param !== 50;
  } else {
    return false;
  }
}

function keyword_of_string(param) {
  switch (param) {
    case "break" :
        return /* KEYWORD_BREAK */51;
    case "component" :
        return /* KEYWORD_COMPONENT */53;
    case "continue" :
        return /* KEYWORD_CONTINUE */52;
    case "else" :
        return /* KEYWORD_ELSE */47;
    case "false" :
        return /* KEYWORD_FALSE */45;
    case "fn" :
        return /* KEYWORD_FN */41;
    case "for" :
        return /* KEYWORD_FOR */48;
    case "if" :
        return /* KEYWORD_IF */46;
    case "in" :
        return /* KEYWORD_IN */49;
    case "let" :
        return /* KEYWORD_LET */42;
    case "mutable" :
        return /* KEYWORD_MUTABLE */43;
    case "page" :
        return /* KEYWORD_PAGE */55;
    case "reverse" :
        return /* KEYWORD_REVERSE */50;
    case "site" :
        return /* KEYWORD_SITE */54;
    case "store" :
        return /* KEYWORD_STORE */56;
    case "true" :
        return /* KEYWORD_TRUE */44;
    default:
      return ;
  }
}

function lookup_keyword(str) {
  var t = keyword_of_string(str);
  if (t !== undefined) {
    return t;
  }
  var match = Caml_string.get(str, 0);
  if (match > 90 || match < 65) {
    return {
            TAG: /* IDENT_LOWER */0,
            _0: str
          };
  } else {
    return {
            TAG: /* IDENT_UPPER */1,
            _0: str
          };
  }
}

export {
  make ,
  to_string ,
  is_keyword ,
  lookup_keyword ,
}
/* No side effect */
