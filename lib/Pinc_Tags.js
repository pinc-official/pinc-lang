// Generated by Melange

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Either from "bs-platform/lib/es6/either.js";
import * as $$Option from "bs-platform/lib/es6/option.js";
import * as Stdlib from "bs-platform/lib/es6/stdlib.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Hashtbl from "bs-platform/lib/es6/hashtbl.js";
import * as Pinc_Ast from "./Pinc_Ast.js";

function validate(param) {
  if (typeof param === "string") {
    return "Null";
  }
  var variant = param.NAME;
  if (variant === "DefinitionInfo") {
    return Stdlib.failwith("tried to assign definition info to a string tag.");
  } else if (variant === "TagInfo") {
    return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
  } else if (variant === "Function") {
    return Stdlib.failwith("tried to assign function to a string tag.");
  } else if (variant === "Int") {
    return Stdlib.failwith("tried to assign integer value to a string tag.");
  } else if (variant === "Float") {
    return Stdlib.failwith("tried to assign float value to a string tag.");
  } else if (variant === "Bool") {
    return Stdlib.failwith("tried to assign boolean value to a string tag.");
  } else if (variant === "Record") {
    return Stdlib.failwith("tried to assign record value to a string tag.");
  } else if (variant === "TemplateNode") {
    return Stdlib.failwith("tried to assign template node to a string tag.");
  } else if (variant === "Array") {
    return Stdlib.failwith("tried to assign array value to a string tag.");
  } else {
    return {
            NAME: "String",
            VAL: param.VAL
          };
  }
}

function get_value(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "key", attributes);
  var key = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `key` #String to be of type string") : param$1.VAL
    ) : Stdlib.failwith("Expected attribute `key` to exist on #String");
  var $$default = Curry._2(Pinc_Ast.StringMap.find_opt, "default", attributes);
  var v = Curry._2(Pinc_Ast.StringMap.find_opt, key, data);
  return Curry._1(param[3], validate($$Option.value(v !== undefined ? v : $$default, "Null")));
}

var StringTag = {
  validate: validate,
  get_value: get_value
};

function validate$1(param) {
  if (typeof param === "string") {
    return "Null";
  }
  var variant = param.NAME;
  if (variant === "DefinitionInfo") {
    return Stdlib.failwith("tried to assign definition info to a int tag.");
  } else if (variant === "TagInfo") {
    return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
  } else if (variant === "Function") {
    return Stdlib.failwith("tried to assign function to a int tag.");
  } else if (variant === "Int") {
    return {
            NAME: "Int",
            VAL: param.VAL
          };
  } else if (variant === "Float") {
    return Stdlib.failwith("tried to assign float value to a int tag.");
  } else if (variant === "Bool") {
    return Stdlib.failwith("tried to assign boolean value to a int tag.");
  } else if (variant === "Record") {
    return Stdlib.failwith("tried to assign record value to a int tag.");
  } else if (variant === "TemplateNode") {
    return Stdlib.failwith("tried to assign template node to a int tag.");
  } else if (variant === "Array") {
    return Stdlib.failwith("tried to assign array value to a int tag.");
  } else {
    return Stdlib.failwith("tried to assign string value to a int tag.");
  }
}

function get_value$1(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "key", attributes);
  var key = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `key` #Int to be of type string") : param$1.VAL
    ) : Stdlib.failwith("Expected attribute `key` to exist on #Int");
  var $$default = Curry._2(Pinc_Ast.StringMap.find_opt, "default", attributes);
  var v = Curry._2(Pinc_Ast.StringMap.find_opt, key, data);
  return Curry._1(param[3], validate$1($$Option.value(v !== undefined ? v : $$default, "Null")));
}

var IntTag = {
  validate: validate$1,
  get_value: get_value$1
};

function validate$2(param) {
  if (typeof param === "string") {
    return "Null";
  }
  var variant = param.NAME;
  if (variant === "DefinitionInfo") {
    return Stdlib.failwith("tried to assign definition info to a float tag.");
  } else if (variant === "TagInfo") {
    return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
  } else if (variant === "Function") {
    return Stdlib.failwith("tried to assign function to a float tag.");
  } else if (variant === "Int") {
    return Stdlib.failwith("tried to assign int value to a float tag.");
  } else if (variant === "Float") {
    return {
            NAME: "Float",
            VAL: param.VAL
          };
  } else if (variant === "Bool") {
    return Stdlib.failwith("tried to assign boolean value to a float tag.");
  } else if (variant === "Record") {
    return Stdlib.failwith("tried to assign record value to a float tag.");
  } else if (variant === "TemplateNode") {
    return Stdlib.failwith("tried to assign template node to a float tag.");
  } else if (variant === "Array") {
    return Stdlib.failwith("tried to assign array value to a float tag.");
  } else {
    return Stdlib.failwith("tried to assign string value to a float tag.");
  }
}

function get_value$2(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "key", attributes);
  var key = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `key` #Float to be of type string") : param$1.VAL
    ) : Stdlib.failwith("Expected attribute `key` to exist on #Float");
  var $$default = Curry._2(Pinc_Ast.StringMap.find_opt, "default", attributes);
  var v = Curry._2(Pinc_Ast.StringMap.find_opt, key, data);
  return Curry._1(param[3], validate$2($$Option.value(v !== undefined ? v : $$default, "Null")));
}

var FloatTag = {
  validate: validate$2,
  get_value: get_value$2
};

function validate$3(param) {
  if (typeof param === "string") {
    return "Null";
  }
  var variant = param.NAME;
  if (variant === "DefinitionInfo") {
    return Stdlib.failwith("tried to assign definition info to a boolean tag.");
  } else if (variant === "TagInfo") {
    return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
  } else if (variant === "Function") {
    return Stdlib.failwith("tried to assign function to a boolean tag.");
  } else if (variant === "Int") {
    return Stdlib.failwith("tried to assign int value to a boolean tag.");
  } else if (variant === "Float") {
    return Stdlib.failwith("tried to assign float value to a boolean tag.");
  } else if (variant === "Bool") {
    return {
            NAME: "Bool",
            VAL: param.VAL
          };
  } else if (variant === "Record") {
    return Stdlib.failwith("tried to assign record value to a boolean tag.");
  } else if (variant === "TemplateNode") {
    return Stdlib.failwith("tried to assign template node to a boolean tag.");
  } else if (variant === "Array") {
    return Stdlib.failwith("tried to assign array value to a boolean tag.");
  } else {
    return Stdlib.failwith("tried to assign string value to a boolean tag.");
  }
}

function get_value$3(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "key", attributes);
  var key = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `key` #Boolean to be of type string") : param$1.VAL
    ) : Stdlib.failwith("Expected attribute `key` to exist on #Boolean");
  var $$default = Curry._2(Pinc_Ast.StringMap.find_opt, "default", attributes);
  var v = Curry._2(Pinc_Ast.StringMap.find_opt, key, data);
  return Curry._1(param[3], validate$3($$Option.value(v !== undefined ? v : $$default, "Null")));
}

var BooleanTag = {
  validate: validate$3,
  get_value: get_value$3
};

function validate$4(param) {
  if (typeof param === "string") {
    return "Null";
  }
  var variant = param.NAME;
  if (variant === "DefinitionInfo") {
    return Stdlib.failwith("tried to assign definition info to a array tag.");
  } else if (variant === "TagInfo") {
    return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
  } else if (variant === "Function") {
    return Stdlib.failwith("tried to assign function to a array tag.");
  } else if (variant === "Int") {
    return Stdlib.failwith("tried to assign int value to a array tag.");
  } else if (variant === "Float") {
    return Stdlib.failwith("tried to assign float value to a array tag.");
  } else if (variant === "Bool") {
    return Stdlib.failwith("tried to assign boolean value to a array tag.");
  } else if (variant === "Record") {
    return Stdlib.failwith("tried to assign record value to a array tag.");
  } else if (variant === "TemplateNode") {
    return Stdlib.failwith("tried to assign template node to a array tag.");
  } else if (variant === "Array") {
    return {
            NAME: "Array",
            VAL: param.VAL
          };
  } else {
    return Stdlib.failwith("tried to assign string value to a array tag.");
  }
}

function get_value$4(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "key", attributes);
  var key = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `key` #Array to be of type string") : param$1.VAL
    ) : Stdlib.failwith("Expected attribute `key` to exist on #Array");
  var param$2 = Curry._2(Pinc_Ast.StringMap.find_opt, "of", attributes);
  var of$p = param$2 !== undefined ? (
      typeof param$2 === "string" || param$2.NAME !== "TagInfo" ? Stdlib.failwith("Expected attribute `of` #Array to be a tag describing the type of the items inside.") : param$2.VAL[3]
    ) : Stdlib.failwith("Expected attribute `of` to exist on #Array");
  var $$default = Curry._2(Pinc_Ast.StringMap.find_opt, "default", attributes);
  var v = Curry._2(Pinc_Ast.StringMap.find_opt, key, data);
  var param$3 = validate$4($$Option.value(v !== undefined ? v : $$default, "Null"));
  return Curry._1(param[3], typeof param$3 === "string" ? "Null" : ({
                  NAME: "Array",
                  VAL: $$Array.map(Curry.__1(of$p), param$3.VAL)
                }));
}

var ArrayTag = {
  validate: validate$4,
  get_value: get_value$4
};

function validate$5(param) {
  if (typeof param === "string") {
    return "Null";
  }
  var variant = param.NAME;
  if (variant === "DefinitionInfo") {
    return Stdlib.failwith("tried to assign definition info to a record tag.");
  } else if (variant === "TagInfo") {
    return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
  } else if (variant === "Function") {
    return Stdlib.failwith("tried to assign function to a record tag.");
  } else if (variant === "Int") {
    return Stdlib.failwith("tried to assign int value to a record tag.");
  } else if (variant === "Float") {
    return Stdlib.failwith("tried to assign float value to a record tag.");
  } else if (variant === "Bool") {
    return Stdlib.failwith("tried to assign boolean value to a record tag.");
  } else if (variant === "Record") {
    return {
            NAME: "Record",
            VAL: param.VAL
          };
  } else if (variant === "TemplateNode") {
    return Stdlib.failwith("tried to assign template node to a record tag.");
  } else if (variant === "Array") {
    return Stdlib.failwith("tried to assign array value to a record tag.");
  } else {
    return Stdlib.failwith("tried to assign string value to a record tag.");
  }
}

function get_value$5(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "key", attributes);
  var key = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `key` #Record to be of type string") : param$1.VAL
    ) : Stdlib.failwith("Expected attribute `key` to exist on #Record");
  var param$2 = Curry._2(Pinc_Ast.StringMap.find_opt, "of", attributes);
  var of$p = param$2 !== undefined ? (
      typeof param$2 === "string" || param$2.NAME !== "Record" ? Stdlib.failwith("Expected attribute `of` #Array to be a tag describing the type of the items inside.") : Curry._2(Pinc_Ast.StringMap.filter_map, (function (_key, param) {
                if (typeof param === "string" || param.NAME !== "TagInfo") {
                  return ;
                } else {
                  return param.VAL;
                }
              }), param$2.VAL)
    ) : Stdlib.failwith("Expected attribute `of` to exist on #Record");
  var $$default = Curry._2(Pinc_Ast.StringMap.find_opt, "default", attributes);
  var v = Curry._2(Pinc_Ast.StringMap.find_opt, key, data);
  var param$3 = validate$5($$Option.value(v !== undefined ? v : $$default, "Null"));
  return Curry._1(param[3], typeof param$3 === "string" ? "Null" : ({
                  NAME: "Record",
                  VAL: Curry._2(Pinc_Ast.StringMap.mapi, (function (key, value) {
                          var param = Curry._2(Pinc_Ast.StringMap.find_opt, key, of$p);
                          if (param !== undefined) {
                            return Curry._1(param[3], value);
                          } else {
                            return value;
                          }
                        }), param$3.VAL)
                }));
}

var RecordTag = {
  validate: validate$5,
  get_value: get_value$5
};

function get_value$6(data, param) {
  var transformer = param[3];
  var attributes = param[2];
  var param$1 = $$Option.value(Curry._2(Pinc_Ast.StringMap.find_opt, "name", attributes), {
        NAME: "String",
        VAL: ""
      });
  var slot_name = typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `name` on #Slot to be of type string.") : param$1.VAL;
  var param$2 = $$Option.value(Curry._2(Pinc_Ast.StringMap.find_opt, "min", attributes), {
        NAME: "Int",
        VAL: 0
      });
  var min = typeof param$2 === "string" || param$2.NAME !== "Int" ? Stdlib.failwith("Expected attribute `min` on #Slot to be of type int.") : param$2.VAL;
  var param$3 = Curry._2(Pinc_Ast.StringMap.find_opt, "max", attributes);
  var max = param$3 !== undefined ? (
      typeof param$3 === "string" || param$3.NAME !== "Int" ? Stdlib.failwith("Expected attribute `max` on #Slot to be of type int.") : param$3.VAL
    ) : undefined;
  var param$4 = Curry._2(Pinc_Ast.StringMap.find_opt, "instanceOf", attributes);
  var instanceOf = param$4 !== undefined ? (
      typeof param$4 === "string" || param$4.NAME !== "Array" ? Stdlib.failwith("Expected attribute `instanceOf` on #Slot to be an array.") : $$Array.map((function (param) {
                if (typeof param === "string" || param.NAME !== "DefinitionInfo") {
                  return Stdlib.failwith("Expected attribute `instanceOf` on #Slot to be an array of uppercase identifiers.");
                } else {
                  return param.VAL;
                }
              }), param$4.VAL)
    ) : undefined;
  var find_slot_key = function (attributes) {
    var param = $$Option.value(Curry._2(Pinc_Ast.StringMap.find_opt, "slot", attributes), {
          NAME: "String",
          VAL: ""
        });
    if (typeof param === "string" || param.NAME !== "String") {
      return Stdlib.failwith("Expected slot attribute to be of type string");
    } else {
      return param.VAL;
    }
  };
  var keep_slotted = function (acc, value) {
    var tag;
    var attributes;
    if (typeof value === "string") {
      return Stdlib.failwith("Only nodes may be placed into slots. If you want to put a plain text into a slot, you have to wrap it in a <p></p> tag for example.");
    }
    var variant = value.NAME;
    if (variant === "String") {
      if ($$String.trim(value.VAL) === "") {
        return acc;
      } else {
        return Stdlib.failwith("Only nodes may be placed into slots. If you want to put a plain text into a slot, you have to wrap it in a <p></p> tag for example.");
      }
    }
    if (variant !== "TemplateNode") {
      if (variant === "Array") {
        return $$Array.fold_left(keep_slotted, acc, value.VAL);
      } else {
        return Stdlib.failwith("Only nodes may be placed into slots. If you want to put a plain text into a slot, you have to wrap it in a <p></p> tag for example.");
      }
    }
    var match = value.VAL;
    var match$1 = match[0];
    if (typeof match$1 === "string") {
      if (match$1 !== "Html") {
        return Stdlib.failwith("Only nodes may be placed into slots. If you want to put a plain text into a slot, you have to wrap it in a <p></p> tag for example.");
      }
      tag = match[1];
      attributes = match[2];
    } else {
      if (match$1.NAME !== "Component") {
        return Stdlib.failwith("Only nodes may be placed into slots. If you want to put a plain text into a slot, you have to wrap it in a <p></p> tag for example.");
      }
      tag = match[1];
      attributes = match[2];
    }
    if (find_slot_key(attributes) === slot_name) {
      var f = $$Array.append(acc, [value]);
      if (instanceOf === undefined) {
        return f;
      }
      var is_in_list = {
        contents: false
      };
      var match$2 = List.partition_map((function (param) {
              var name = param[0];
              if (name === tag) {
                is_in_list.contents = true;
              }
              if (param[2] === "Negated") {
                return Either.right(name);
              } else {
                return Either.left(name);
              }
            }), $$Array.to_list(instanceOf));
      var allowed = match$2[0];
      var is_in_list$1 = is_in_list.contents;
      var is_allowed = allowed ? (
          match$2[1] ? List.mem(tag, allowed) : is_in_list$1
        ) : !is_in_list$1;
      if (is_allowed) {
        return f;
      }
      var arg = [];
      return Stdlib.failwith("Child with tag `" + (tag + ("` may not be used inside the " + ((
                        slot_name === "" ? "Default #Slot." : "#Slot with name `" + (slot_name + "`")
                      ) + (". The following restrictions are set: [ " + ($$String.concat(",", List.map((function (param) {
                                      var name = param[0];
                                      if (param[2] === "Negated") {
                                        return "!" + name;
                                      } else {
                                        return name;
                                      }
                                    }), $$Array.to_list((function (param) {
                                            return $$Option.value(param, arg);
                                          })(instanceOf)))) + " ]"))))));
    } else {
      return acc;
    }
  };
  var slotted_children = $$Array.fold_left(keep_slotted, [], $$Array.of_list(data));
  var amount_of_children = slotted_children.length;
  var exit = 0;
  if (slot_name === "") {
    if (amount_of_children < min) {
      return Stdlib.failwith("Default #Slot did not reach the minimum amount of nodes (specified as " + (String(min) + ")."));
    }
    exit = 2;
  } else {
    exit = 2;
  }
  if (exit === 2) {
    if (amount_of_children < min) {
      return Stdlib.failwith("#Slot with name `" + (slot_name + ("` did not reach the minimum amount of nodes (specified as " + (String(min) + ")."))));
    }
    if (slot_name === "") {
      if (max === undefined) {
        return Curry._1(transformer, {
                    NAME: "Array",
                    VAL: slotted_children
                  });
      }
      if (amount_of_children > max) {
        return Stdlib.failwith("Default #Slot includes more than the maximum amount of nodes (specified as " + (String(max) + ")."));
      }
      
    }
    
  }
  if (max !== undefined && amount_of_children > max) {
    return Stdlib.failwith("#Slot with name `" + (slot_name + ("` includes more than the maximum amount of nodes (specified as " + (String(max) + ")."))));
  } else {
    return Curry._1(transformer, {
                NAME: "Array",
                VAL: slotted_children
              });
  }
}

var SlotTag = {
  get_value: get_value$6
};

function validate$6(param) {
  if (typeof param === "string") {
    return "Null";
  }
  return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
}

function get_value$7(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "name", attributes);
  var name = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `name` on #SetContext to be of type string.") : param$1.VAL
    ) : Stdlib.failwith("attribute name is required when setting a context.");
  var value = Curry._2(Pinc_Ast.StringMap.find_opt, "value", attributes);
  var value$1 = value !== undefined ? value : Stdlib.failwith("attribute value is required when setting a context.");
  Hashtbl.add(data, name, value$1);
  return Curry._1(param[3], validate$6("Null"));
}

var SetContextTag = {
  validate: validate$6,
  get_value: get_value$7
};

function validate$7(v) {
  if (typeof v === "string" || v.NAME !== "TagInfo") {
    return v;
  } else {
    return Stdlib.failwith("Something unexpected happened...this is my fault, not yours");
  }
}

function get_value$8(data, param) {
  var attributes = param[2];
  var param$1 = Curry._2(Pinc_Ast.StringMap.find_opt, "name", attributes);
  var name = param$1 !== undefined ? (
      typeof param$1 === "string" || param$1.NAME !== "String" ? Stdlib.failwith("Expected attribute `name` on #GetContext to be of type string.") : param$1.VAL
    ) : Stdlib.failwith("attribute name is required when getting a context.");
  var $$default = Curry._2(Pinc_Ast.StringMap.find_opt, "default", attributes);
  var v = Hashtbl.find_opt(data, name);
  return Curry._1(param[3], validate$7($$Option.value(v !== undefined ? v : $$default, "Null")));
}

var GetContextTag = {
  validate: validate$7,
  get_value: get_value$8
};

export {
  StringTag ,
  IntTag ,
  FloatTag ,
  BooleanTag ,
  ArrayTag ,
  RecordTag ,
  SlotTag ,
  SetContextTag ,
  GetContextTag ,
}
/* Hashtbl Not a pure module */
