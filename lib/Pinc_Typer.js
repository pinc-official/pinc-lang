// Generated by Melange

import * as List from "melange/lib/es6/list.js";
import * as $$Array from "melange/lib/es6/array.js";
import * as Curry from "melange/lib/es6/curry.js";
import * as $$Option from "melange/lib/es6/option.js";
import * as Stdlib from "melange/lib/es6/stdlib.js";
import * as StringMap from "./StringMap.js";
import * as Caml_option from "melange/lib/es6/caml_option.js";

function required(fn, value) {
  var v = Curry._1(fn, value);
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  } else {
    return Stdlib.failwith("required a value, but got null");
  }
}

function attribute(key, fn, value) {
  return $$Option.bind(Curry._2(StringMap.find_opt, key, value), fn);
}

function string(s) {
  if (typeof s === "number") {
    return ;
  }
  switch (s.TAG | 0) {
    case /* Portal */0 :
        return Stdlib.failwith("expected string, got portal value");
    case /* String */1 :
        return s._0;
    case /* Int */2 :
        return Stdlib.failwith("expected string, got int");
    case /* Float */3 :
        return Stdlib.failwith("expected string, got float");
    case /* Bool */4 :
        return Stdlib.failwith("expected string, got bool");
    case /* Array */5 :
        return Stdlib.failwith("expected string, got array");
    case /* Record */6 :
        return Stdlib.failwith("expected string, got record");
    case /* Function */7 :
        return Stdlib.failwith("expected string, got function definition");
    case /* DefinitionInfo */8 :
        return Stdlib.failwith("expected string, got definition info");
    case /* TagInfo */9 :
        return Stdlib.failwith("expected string, got tag");
    case /* HtmlTemplateNode */10 :
        return Stdlib.failwith("expected string, got HTML template node");
    case /* ComponentTemplateNode */11 :
        return Stdlib.failwith("expected string, got component template node");
    
  }
}

function $$int(i) {
  if (typeof i === "number") {
    return ;
  }
  switch (i.TAG | 0) {
    case /* Portal */0 :
        return Stdlib.failwith("expected int, got portal value");
    case /* String */1 :
        return Stdlib.failwith("expected int, got string");
    case /* Int */2 :
        return i._0;
    case /* Float */3 :
        return Stdlib.failwith("expected int, got float");
    case /* Bool */4 :
        return Stdlib.failwith("expected int, got bool");
    case /* Array */5 :
        return Stdlib.failwith("expected int, got array");
    case /* Record */6 :
        return Stdlib.failwith("expected int, got record");
    case /* Function */7 :
        return Stdlib.failwith("expected int, got function definition");
    case /* DefinitionInfo */8 :
        return Stdlib.failwith("expected int, got definition info");
    case /* TagInfo */9 :
        return Stdlib.failwith("expected int, got tag");
    case /* HtmlTemplateNode */10 :
        return Stdlib.failwith("expected int, got HTML template node");
    case /* ComponentTemplateNode */11 :
        return Stdlib.failwith("expected int, got component template node");
    
  }
}

function array(fn, a) {
  if (typeof a === "number") {
    return ;
  }
  switch (a.TAG | 0) {
    case /* Portal */0 :
        return Stdlib.failwith("expected array, got portal value");
    case /* String */1 :
        return Stdlib.failwith("expected array, got string");
    case /* Int */2 :
        return Stdlib.failwith("expected array, got int");
    case /* Float */3 :
        return Stdlib.failwith("expected array, got float");
    case /* Bool */4 :
        return Stdlib.failwith("expected array, bool");
    case /* Array */5 :
        return List.map(fn, $$Array.to_list(a._0));
    case /* Record */6 :
        return Stdlib.failwith("expected array, got record");
    case /* Function */7 :
        return Stdlib.failwith("expected array, got function definition");
    case /* DefinitionInfo */8 :
        return Stdlib.failwith("expected array, got definition info");
    case /* TagInfo */9 :
        return Stdlib.failwith("expected array, got tag");
    case /* HtmlTemplateNode */10 :
        return Stdlib.failwith("expected array, got HTML template node");
    case /* ComponentTemplateNode */11 :
        return Stdlib.failwith("expected array, got component template node");
    
  }
}

function record(r) {
  if (typeof r === "number") {
    return ;
  }
  switch (r.TAG | 0) {
    case /* Portal */0 :
        return Stdlib.failwith("expected record, got portal value");
    case /* String */1 :
        return Stdlib.failwith("expected record, got string");
    case /* Int */2 :
        return Stdlib.failwith("expected record, got int");
    case /* Float */3 :
        return Stdlib.failwith("expected record, got float");
    case /* Bool */4 :
        return Stdlib.failwith("expected record, got bool");
    case /* Array */5 :
        return Stdlib.failwith("expected record, got array");
    case /* Record */6 :
        return Caml_option.some(r._0);
    case /* Function */7 :
        return Stdlib.failwith("expected record, got function definition");
    case /* DefinitionInfo */8 :
        return Stdlib.failwith("expected record, got definition info");
    case /* TagInfo */9 :
        return Stdlib.failwith("expected record, got tag");
    case /* HtmlTemplateNode */10 :
        return Stdlib.failwith("expected record, got HTML template node");
    case /* ComponentTemplateNode */11 :
        return Stdlib.failwith("expected record, got component template node");
    
  }
}

var Expect = {
  required: required,
  attribute: attribute,
  string: string,
  $$int: $$int,
  array: array,
  record: record
};

export {
  Expect ,
}
/* StringMap Not a pure module */
