// Generated by Melange


function make(param) {
  switch (param) {
    case /* EQUAL */0 :
        return {
                typ: /* EQUAL */0,
                closing_token: undefined,
                precedence: 30,
                assoc: /* Left */0
              };
    case /* NOT_EQUAL */1 :
        return {
                typ: /* NOT_EQUAL */1,
                closing_token: undefined,
                precedence: 30,
                assoc: /* Left */0
              };
    case /* GREATER */2 :
        return {
                typ: /* GREATER */2,
                closing_token: undefined,
                precedence: 30,
                assoc: /* Left */0
              };
    case /* GREATER_EQUAL */3 :
        return {
                typ: /* GREATER_EQUAL */3,
                closing_token: undefined,
                precedence: 30,
                assoc: /* Left */0
              };
    case /* LESS */4 :
        return {
                typ: /* LESS */4,
                closing_token: undefined,
                precedence: 30,
                assoc: /* Left */0
              };
    case /* LESS_EQUAL */5 :
        return {
                typ: /* LESS_EQUAL */5,
                closing_token: undefined,
                precedence: 30,
                assoc: /* Left */0
              };
    case /* PLUS */6 :
        return {
                typ: /* PLUS */6,
                closing_token: undefined,
                precedence: 50,
                assoc: /* Left */0
              };
    case /* MINUS */7 :
        return {
                typ: /* MINUS */7,
                closing_token: undefined,
                precedence: 50,
                assoc: /* Left */0
              };
    case /* TIMES */8 :
        return {
                typ: /* TIMES */8,
                closing_token: undefined,
                precedence: 60,
                assoc: /* Left */0
              };
    case /* DIV */9 :
        return {
                typ: /* DIV */9,
                closing_token: undefined,
                precedence: 60,
                assoc: /* Left */0
              };
    case /* POW */10 :
        return {
                typ: /* POW */10,
                closing_token: undefined,
                precedence: 70,
                assoc: /* Right */1
              };
    case /* MODULO */11 :
        return {
                typ: /* MODULO */11,
                closing_token: undefined,
                precedence: 60,
                assoc: /* Left */0
              };
    case /* CONCAT */12 :
        return {
                typ: /* CONCAT */12,
                closing_token: undefined,
                precedence: 40,
                assoc: /* Left */0
              };
    case /* AND */13 :
        return {
                typ: /* AND */13,
                closing_token: undefined,
                precedence: 20,
                assoc: /* Left */0
              };
    case /* OR */14 :
        return {
                typ: /* OR */14,
                closing_token: undefined,
                precedence: 10,
                assoc: /* Left */0
              };
    case /* DOT_ACCESS */15 :
        return {
                typ: /* DOT_ACCESS */15,
                closing_token: undefined,
                precedence: 110,
                assoc: /* Left */0
              };
    case /* BRACKET_ACCESS */16 :
        return {
                typ: /* BRACKET_ACCESS */16,
                closing_token: /* RIGHT_BRACK */4,
                precedence: 0,
                assoc: /* Left */0
              };
    case /* FUNCTION_CALL */17 :
        return {
                typ: /* FUNCTION_CALL */17,
                closing_token: /* RIGHT_PAREN */2,
                precedence: 120,
                assoc: /* Left */0
              };
    case /* PIPE */18 :
        return {
                typ: /* PIPE */18,
                closing_token: undefined,
                precedence: 0,
                assoc: /* Left */0
              };
    case /* ARRAY_ADD */19 :
        return {
                typ: /* ARRAY_ADD */19,
                closing_token: undefined,
                precedence: 0,
                assoc: /* Left */0
              };
    case /* MERGE */20 :
        return {
                typ: /* MERGE */20,
                closing_token: undefined,
                precedence: 0,
                assoc: /* Left */0
              };
    case /* RANGE */21 :
        return {
                typ: /* RANGE */21,
                closing_token: undefined,
                precedence: 5,
                assoc: /* Left */0
              };
    case /* INCLUSIVE_RANGE */22 :
        return {
                typ: /* INCLUSIVE_RANGE */22,
                closing_token: undefined,
                precedence: 5,
                assoc: /* Left */0
              };
    
  }
}

function to_string(param) {
  switch (param) {
    case /* EQUAL */0 :
        return "==";
    case /* NOT_EQUAL */1 :
        return "!=";
    case /* GREATER */2 :
        return ">";
    case /* GREATER_EQUAL */3 :
        return ">=";
    case /* LESS */4 :
        return "<";
    case /* LESS_EQUAL */5 :
        return "<=";
    case /* PLUS */6 :
        return "+";
    case /* MINUS */7 :
        return "-";
    case /* TIMES */8 :
        return "*";
    case /* DIV */9 :
        return "/";
    case /* POW */10 :
        return "**";
    case /* MODULO */11 :
        return "%";
    case /* CONCAT */12 :
        return "++";
    case /* AND */13 :
        return "&&";
    case /* OR */14 :
        return "||";
    case /* DOT_ACCESS */15 :
        return ".";
    case /* BRACKET_ACCESS */16 :
        return "[";
    case /* FUNCTION_CALL */17 :
        return "(";
    case /* PIPE */18 :
        return "|>";
    case /* ARRAY_ADD */19 :
        return "<-";
    case /* MERGE */20 :
        return "@@";
    case /* RANGE */21 :
        return "..";
    case /* INCLUSIVE_RANGE */22 :
        return "...";
    
  }
}

var Binary = {
  make: make,
  to_string: to_string
};

function make$1(param) {
  if (param) {
    return {
            typ: /* NOT */1,
            precedence: 100
          };
  } else {
    return {
            typ: /* MINUS */0,
            precedence: 100
          };
  }
}

function to_string$1(param) {
  if (param) {
    return "!...";
  } else {
    return "-...";
  }
}

var Unary = {
  make: make$1,
  to_string: to_string$1
};

export {
  Binary ,
  Unary ,
}
/* No side effect */
