// Generated by Melange

import * as Int from "bs-platform/lib/es6/int.js";
import * as Bool from "bs-platform/lib/es6/bool.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Float from "bs-platform/lib/es6/float.js";
import * as $$Buffer from "bs-platform/lib/es6/buffer.js";
import * as Stdlib from "bs-platform/lib/es6/stdlib.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Hashtbl from "bs-platform/lib/es6/hashtbl.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pinc_HTML from "./Pinc_HTML.js";
import * as StringMap from "./StringMap.js";
import * as Caml_module from "bs-platform/lib/es6/caml_module.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var Value = Caml_module.init_mod([
      "Pinc_Interpreter_Generic.ml",
      44,
      6
    ], {
      TAG: /* Module */0,
      _0: [
        [
          /* Function */0,
          "null"
        ],
        [
          /* Function */0,
          "of_string"
        ],
        [
          /* Function */0,
          "of_bool"
        ],
        [
          /* Function */0,
          "of_int"
        ],
        [
          /* Function */0,
          "of_float"
        ],
        [
          /* Function */0,
          "of_list"
        ],
        [
          /* Function */0,
          "of_string_map"
        ],
        [
          /* Function */0,
          "make_component"
        ],
        [
          /* Function */0,
          "to_string"
        ],
        [
          /* Function */0,
          "is_true"
        ],
        [
          /* Function */0,
          "equal"
        ],
        [
          /* Function */0,
          "compare"
        ]
      ]
    });

var State = Caml_module.init_mod([
      "Pinc_Interpreter_Generic.ml",
      268,
      6
    ], {
      TAG: /* Module */0,
      _0: [
        [
          /* Function */0,
          "make"
        ],
        [
          /* Function */0,
          "add_scope"
        ],
        [
          /* Function */0,
          "add_value_to_scope"
        ],
        [
          /* Function */0,
          "add_value_to_function_scopes"
        ],
        [
          /* Function */0,
          "update_value_in_scope"
        ],
        [
          /* Function */0,
          "get_value_from_scope"
        ],
        [
          /* Function */0,
          "get_output"
        ],
        [
          /* Function */0,
          "add_output"
        ],
        [
          /* Function */0,
          "get_bindings"
        ],
        [
          /* Function */0,
          "call_tag_listener"
        ]
      ]
    });

function $$null(param) {
  return "Null";
}

function of_string(s) {
  return {
          NAME: "String",
          VAL: s
        };
}

function of_bool(b) {
  return {
          NAME: "Bool",
          VAL: b
        };
}

function of_int(i) {
  return {
          NAME: "Int",
          VAL: i
        };
}

function of_float(f) {
  return {
          NAME: "Float",
          VAL: f
        };
}

function of_list(l) {
  return {
          NAME: "Array",
          VAL: $$Array.of_list(l)
        };
}

function of_string_map(m) {
  return {
          NAME: "Record",
          VAL: m
        };
}

function make_component(render, tag, attributes, children) {
  return {
          NAME: "TemplateNode",
          VAL: [
            {
              NAME: "Component",
              VAL: render
            },
            tag,
            attributes,
            children,
            false
          ]
        };
}

function to_string(_param) {
  while(true) {
    var param = _param;
    if (typeof param === "string") {
      return "";
    }
    var variant = param.NAME;
    if (variant === "DefinitionInfo") {
      return "";
    }
    if (variant === "TagInfo") {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Pinc_Interpreter_Generic.ml",
              142,
              20
            ],
            Error: new Error()
          };
    }
    if (variant === "Function") {
      return "";
    }
    if (variant === "Int") {
      return String(param.VAL);
    }
    if (variant === "Float") {
      var f = param.VAL;
      if (Float.is_integer(f)) {
        return String(f | 0);
      } else {
        return Stdlib.string_of_float(f);
      }
    }
    if (variant === "Bool") {
      if (param.VAL) {
        return "true";
      } else {
        return "false";
      }
    }
    if (variant === "Record") {
      var b = $$Buffer.create(1024);
      Curry._2(StringMap.iter, (function(b){
          return function (_key, value) {
            $$Buffer.add_string(b, to_string(value));
            return $$Buffer.add_char(b, /* '\n' */10);
          }
          }(b)), param.VAL);
      return $$Buffer.contents(b);
    }
    if (variant === "TemplateNode") {
      var match = param.VAL;
      var match$1 = match[0];
      if (typeof match$1 === "string") {
        var attributes = match[2];
        var tag = match[1];
        var buf = $$Buffer.create(128);
        $$Buffer.add_char(buf, /* '<' */60);
        $$Buffer.add_string(buf, tag);
        if (!Curry._1(StringMap.is_empty, attributes)) {
          Curry._2(StringMap.iter, (function(buf){
              return function (key, value) {
                if (typeof value === "string") {
                  return ;
                }
                if (value.NAME === "TagInfo") {
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "Pinc_Interpreter_Generic.ml",
                          126,
                          31
                        ],
                        Error: new Error()
                      };
                }
                $$Buffer.add_char(buf, /* ' ' */32);
                $$Buffer.add_string(buf, key);
                $$Buffer.add_char(buf, /* '=' */61);
                $$Buffer.add_char(buf, /* '"' */34);
                $$Buffer.add_string(buf, to_string(value));
                return $$Buffer.add_char(buf, /* '"' */34);
              }
              }(buf)), attributes);
        }
        if (match[4] && Pinc_HTML.is_void_el(tag)) {
          $$Buffer.add_string(buf, " />");
        } else {
          $$Buffer.add_char(buf, /* '>' */62);
          List.iter((function(buf){
              return function (child) {
                return $$Buffer.add_string(buf, to_string(child));
              }
              }(buf)), match[3]);
          $$Buffer.add_char(buf, /* '<' */60);
          $$Buffer.add_char(buf, /* '/' */47);
          $$Buffer.add_string(buf, tag);
          $$Buffer.add_char(buf, /* '>' */62);
        }
        return $$Buffer.contents(buf);
      }
      _param = Curry._1(match$1.VAL, undefined);
      continue ;
    }
    if (variant !== "Array") {
      return param.VAL;
    }
    var buf$1 = $$Buffer.create(200);
    $$Array.iteri((function(buf$1){
        return function (i, it) {
          if (i !== 0) {
            $$Buffer.add_char(buf$1, /* '\n' */10);
          }
          return $$Buffer.add_string(buf$1, to_string(it));
        }
        }(buf$1)), param.VAL);
    return $$Buffer.contents(buf$1);
  };
}

function is_true(param) {
  if (typeof param === "string") {
    return false;
  }
  var variant = param.NAME;
  if (variant === "DefinitionInfo") {
    return param.VAL[1] === "Exists";
  }
  if (variant === "TagInfo") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Pinc_Interpreter_Generic.ml",
            158,
            20
          ],
          Error: new Error()
        };
  }
  if (variant === "TemplateNode" || variant === "Float" || variant === "Int" || variant === "Function") {
    return true;
  } else if (variant === "Bool") {
    return param.VAL;
  } else if (variant === "Record") {
    return !Curry._1(StringMap.is_empty, param.VAL);
  } else if (variant === "Array") {
    if (param.VAL.length) {
      return true;
    } else {
      return false;
    }
  } else {
    return $$String.trim(param.VAL).length !== 0;
  }
}

function equal(a, b) {
  if (typeof a === "string") {
    if (a === "Null" && b === "Null") {
      return true;
    }
    
  } else {
    var variant = a.NAME;
    if (variant === "String") {
      if (typeof b !== "string" && b.NAME === "String") {
        return $$String.equal(a.VAL, b.VAL);
      }
      
    } else if (variant === "DefinitionInfo") {
      if (typeof b !== "string" && b.NAME === "DefinitionInfo") {
        return $$String.equal(a.VAL[0], b.VAL[0]);
      }
      
    } else {
      if (variant === "TagInfo") {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "Pinc_Interpreter_Generic.ml",
                181,
                23
              ],
              Error: new Error()
            };
      }
      if (variant === "Function") {
        if (typeof b !== "string" && b.NAME === "Function") {
          return false;
        }
        
      } else if (variant === "Int") {
        if (typeof b !== "string") {
          var variant$1 = b.NAME;
          var a$1 = a.VAL;
          if (variant$1 === "Int") {
            return a$1 === b.VAL;
          }
          if (variant$1 === "Float") {
            return a$1 === b.VAL;
          }
          
        }
        
      } else if (variant === "Float") {
        if (typeof b !== "string") {
          var variant$2 = b.NAME;
          var a$2 = a.VAL;
          if (variant$2 === "Int") {
            return a$2 === b.VAL;
          }
          if (variant$2 === "Float") {
            return a$2 === b.VAL;
          }
          
        }
        
      } else if (variant === "Bool") {
        if (typeof b !== "string" && b.NAME === "Bool") {
          return Caml_obj.caml_equal(a.VAL, b.VAL);
        }
        
      } else if (variant === "Record") {
        if (typeof b !== "string" && b.NAME === "Record") {
          return Curry._3(StringMap.equal, equal, a.VAL, b.VAL);
        }
        
      } else if (variant === "TemplateNode") {
        if (typeof b !== "string" && b.NAME === "TemplateNode") {
          var match = b.VAL;
          var match$1 = a.VAL;
          if (Caml_obj.caml_equal(match$1[0], match[0]) && Caml_obj.caml_equal(match$1[1], match[1]) && Caml_obj.caml_equal(match$1[4], match[4]) && Curry._3(StringMap.equal, equal, match$1[2], match[2])) {
            return Caml_obj.caml_equal(match$1[3], match[3]);
          } else {
            return false;
          }
        }
        
      } else if (variant === "Array" && typeof b !== "string" && b.NAME === "Array") {
        return Caml_obj.caml_equal(a.VAL, b.VAL);
      }
      
    }
  }
  if (typeof b === "string") {
    return false;
  }
  if (b.NAME !== "TagInfo") {
    return false;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Pinc_Interpreter_Generic.ml",
          182,
          23
        ],
        Error: new Error()
      };
}

function compare(a, b) {
  if (typeof a === "string") {
    if (a === "Null" && b === "Null") {
      return 0;
    }
    
  } else {
    var variant = a.NAME;
    if (variant === "String") {
      if (typeof b !== "string" && b.NAME === "String") {
        return $$String.compare(a.VAL, b.VAL);
      }
      
    } else if (variant === "DefinitionInfo") {
      if (typeof b !== "string" && b.NAME === "DefinitionInfo") {
        return 0;
      }
      
    } else {
      if (variant === "TagInfo") {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "Pinc_Interpreter_Generic.ml",
                200,
                23
              ],
              Error: new Error()
            };
      }
      if (variant === "Function") {
        if (typeof b !== "string" && b.NAME === "Function") {
          return 0;
        }
        
      } else if (variant === "Int") {
        if (typeof b !== "string") {
          var variant$1 = b.NAME;
          var a$1 = a.VAL;
          if (variant$1 === "Int") {
            return Int.compare(a$1, b.VAL);
          }
          if (variant$1 === "Float") {
            return Float.compare(a$1, b.VAL);
          }
          
        }
        
      } else if (variant === "Float") {
        if (typeof b !== "string") {
          var variant$2 = b.NAME;
          var a$2 = a.VAL;
          if (variant$2 === "Int") {
            return Float.compare(a$2, b.VAL);
          }
          if (variant$2 === "Float") {
            return Float.compare(a$2, b.VAL);
          }
          
        }
        
      } else if (variant === "Bool") {
        if (typeof b !== "string" && b.NAME === "Bool") {
          return Bool.compare(a.VAL, b.VAL);
        }
        
      } else if (variant === "Record") {
        if (typeof b !== "string" && b.NAME === "Record") {
          return Curry._3(StringMap.compare, compare, a.VAL, b.VAL);
        }
        
      } else if (variant === "TemplateNode") {
        if (typeof b !== "string" && b.NAME === "TemplateNode") {
          return 0;
        }
        
      } else if (variant === "Array" && typeof b !== "string" && b.NAME === "Array") {
        return Int.compare(a.VAL.length, b.VAL.length);
      }
      
    }
  }
  if (typeof b === "string") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Pinc_Interpreter_Generic.ml",
            202,
            11
          ],
          Error: new Error()
        };
  }
  if (b.NAME === "TagInfo") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Pinc_Interpreter_Generic.ml",
            201,
            23
          ],
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Pinc_Interpreter_Generic.ml",
          202,
          11
        ],
        Error: new Error()
      };
}

Caml_module.update_mod({
      TAG: /* Module */0,
      _0: [
        [
          /* Function */0,
          "null"
        ],
        [
          /* Function */0,
          "of_string"
        ],
        [
          /* Function */0,
          "of_bool"
        ],
        [
          /* Function */0,
          "of_int"
        ],
        [
          /* Function */0,
          "of_float"
        ],
        [
          /* Function */0,
          "of_list"
        ],
        [
          /* Function */0,
          "of_string_map"
        ],
        [
          /* Function */0,
          "make_component"
        ],
        [
          /* Function */0,
          "to_string"
        ],
        [
          /* Function */0,
          "is_true"
        ],
        [
          /* Function */0,
          "equal"
        ],
        [
          /* Function */0,
          "compare"
        ]
      ]
    }, Value, {
      $$null: $$null,
      of_string: of_string,
      of_bool: of_bool,
      of_int: of_int,
      of_float: of_float,
      of_list: of_list,
      of_string_map: of_string_map,
      make_component: make_component,
      to_string: to_string,
      is_true: is_true,
      equal: equal,
      compare: compare
    });

function make(tag_listenersOpt, parent_component, contextOpt, declarations) {
  var tag_listeners = tag_listenersOpt !== undefined ? Caml_option.valFromOption(tag_listenersOpt) : StringMap.empty;
  var context = contextOpt !== undefined ? Caml_option.valFromOption(contextOpt) : Hashtbl.create(undefined, 10);
  return {
          binding_identifier: undefined,
          declarations: declarations,
          output: "Null",
          environment: {
            scope: /* [] */0
          },
          tag_listeners: tag_listeners,
          tag_info: false,
          parent_component: parent_component,
          context: context
        };
}

function add_scope(t) {
  var environment = {
    scope: {
      hd: /* [] */0,
      tl: t.environment.scope
    }
  };
  return {
          binding_identifier: t.binding_identifier,
          declarations: t.declarations,
          output: t.output,
          environment: environment,
          tag_listeners: t.tag_listeners,
          tag_info: t.tag_info,
          parent_component: t.parent_component,
          context: t.context
        };
}

function add_value_to_scope(ident, value, is_optional, is_mutable, t) {
  var update_scope = function (t) {
    var match = t.environment.scope;
    if (match) {
      return {
              hd: {
                hd: [
                  ident,
                  {
                    is_mutable: is_mutable,
                    is_optional: is_optional,
                    value: value
                  }
                ],
                tl: match.hd
              },
              tl: match.tl
            };
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Pinc_Interpreter_Generic.ml",
            313,
            14
          ],
          Error: new Error()
        };
  };
  var environment = {
    scope: update_scope(t)
  };
  return {
          binding_identifier: t.binding_identifier,
          declarations: t.declarations,
          output: t.output,
          environment: environment,
          tag_listeners: t.tag_listeners,
          tag_info: t.tag_info,
          parent_component: t.parent_component,
          context: t.context
        };
}

function update_value_in_scope(ident, value, t) {
  var updated = {
    contents: false
  };
  var update_scope = function (state) {
    return List.map((function (scope) {
                  if (updated.contents) {
                    return scope;
                  } else {
                    return List.map((function (v) {
                                  var binding = v[1];
                                  var key = v[0];
                                  if (!updated.contents && key === ident && binding.is_mutable) {
                                    updated.contents = true;
                                    return [
                                            key,
                                            {
                                              is_mutable: binding.is_mutable,
                                              is_optional: binding.is_optional,
                                              value: value
                                            }
                                          ];
                                  }
                                  var match = binding.value;
                                  if (typeof match === "string") {
                                    return v;
                                  }
                                  if (match.NAME !== "Function") {
                                    return v;
                                  }
                                  if (updated.contents) {
                                    return v;
                                  }
                                  var match$1 = match.VAL;
                                  var fn_state = match$1.state;
                                  fn_state.environment.scope = update_scope(fn_state);
                                  return [
                                          key,
                                          {
                                            is_mutable: binding.is_mutable,
                                            is_optional: binding.is_optional,
                                            value: {
                                              NAME: "Function",
                                              VAL: {
                                                parameters: match$1.parameters,
                                                state: fn_state,
                                                exec: match$1.exec
                                              }
                                            }
                                          }
                                        ];
                                }), scope);
                  }
                }), state.environment.scope);
  };
  t.environment.scope = update_scope(t);
}

function add_value_to_function_scopes(ident, value, is_optional, is_mutable, t) {
  var update_scope = function (state) {
    return List.map((function (param) {
                  return List.map((function (v) {
                                var binding = v[1];
                                var match = binding.value;
                                if (typeof match === "string") {
                                  return v;
                                }
                                if (match.NAME !== "Function") {
                                  return v;
                                }
                                var match$1 = match.VAL;
                                var new_state = add_value_to_scope(ident, value, is_optional, is_mutable, match$1.state);
                                return [
                                        v[0],
                                        {
                                          is_mutable: binding.is_mutable,
                                          is_optional: binding.is_optional,
                                          value: {
                                            NAME: "Function",
                                            VAL: {
                                              parameters: match$1.parameters,
                                              state: new_state,
                                              exec: match$1.exec
                                            }
                                          }
                                        }
                                      ];
                              }), param);
                }), state.environment.scope);
  };
  t.environment.scope = update_scope(t);
}

function get_value_from_scope(ident, t) {
  return List.find_map((function (param) {
                return List.assoc_opt(ident, param);
              }), t.environment.scope);
}

function get_output(t) {
  return t.output;
}

function add_output(output, t) {
  return {
          binding_identifier: t.binding_identifier,
          declarations: t.declarations,
          output: output,
          environment: t.environment,
          tag_listeners: t.tag_listeners,
          tag_info: t.tag_info,
          parent_component: t.parent_component,
          context: t.context
        };
}

function get_bindings(t) {
  return List.hd(t.environment.scope);
}

function call_tag_listener(key, tag, t) {
  var listener = Curry._2(StringMap.find_opt, key, t.tag_listeners);
  if (listener === undefined) {
    return "Null";
  }
  var v = Curry._2(listener.eval, t, tag);
  if (v.TAG === /* Ok */0) {
    return v._0;
  } else {
    return Stdlib.failwith(v._0);
  }
}

Caml_module.update_mod({
      TAG: /* Module */0,
      _0: [
        [
          /* Function */0,
          "make"
        ],
        [
          /* Function */0,
          "add_scope"
        ],
        [
          /* Function */0,
          "add_value_to_scope"
        ],
        [
          /* Function */0,
          "add_value_to_function_scopes"
        ],
        [
          /* Function */0,
          "update_value_in_scope"
        ],
        [
          /* Function */0,
          "get_value_from_scope"
        ],
        [
          /* Function */0,
          "get_output"
        ],
        [
          /* Function */0,
          "add_output"
        ],
        [
          /* Function */0,
          "get_bindings"
        ],
        [
          /* Function */0,
          "call_tag_listener"
        ]
      ]
    }, State, {
      make: make,
      add_scope: add_scope,
      add_value_to_scope: add_value_to_scope,
      add_value_to_function_scopes: add_value_to_function_scopes,
      update_value_in_scope: update_value_in_scope,
      get_value_from_scope: get_value_from_scope,
      get_output: get_output,
      add_output: add_output,
      get_bindings: get_bindings,
      call_tag_listener: call_tag_listener
    });

var Tag;

export {
  Value ,
  Tag ,
  State ,
}
/* Value Not a pure module */
